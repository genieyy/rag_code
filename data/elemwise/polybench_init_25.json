{
    "correlation.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i + j) / (N + M) * 100;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j + 1) / (N * M + 1) * 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j + 1) / (N + M) * 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * i + j * j) / (N * N + M * M) * 200 - 100;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i + j) / (N + M) * 100 - 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j) / (N * M) * 200 - 100;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * i + j * j) / (N * N + M * M) * 10;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i % (j + 1)) / (N + M) * 100 + 25;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * i + j * j) / (N * N + M * M) * 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j + 1) / (N * M) * 200 - 100;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i + j) / (N + M) * 50 + 25;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i + j) / (N + M) * 100 + 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * M + j) / (N * M) * 100 + 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j) / (N * M) * 150 + 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i + j) / (N + M) * 150 - 75;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i + j) / (N + M) * 100 + 25;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j) / (N * M) * 50 + 10;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i % 10) * (j % 10) / 100.0 + 1;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * j + 1) / (N * M + 1) * 200 - 50;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i % 10) * (j % 10) / (N + M) * 200 - 100;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * i + j * j) / (N * N + M * M) * 150 - 75;\n}\n",
            "\nstatic\nvoid init_array (int m,\n                 int n,\n                 DATA_TYPE *float_n,\n                 DATA_TYPE POLYBENCH_2D(data,N,M,n,m))\n{\n  int i, j;\n\n  *float_n = (DATA_TYPE)N;\n\n  for (i = 0; i < N; i++)\n    for (j = 0; j < M; j++)\n      data[i][j] = (DATA_TYPE)(i * i + j * j) / (N * N + M * M) * 75 + 5;\n}\n"
        ],
        "code": "\n  for (j = 0; j < _PB_M; j++)\n    {\n      mean[j] = SCALAR_VAL(0.0);\n      for (i = 0; i < _PB_N; i++)\n\tmean[j] += data[i][j];\n      mean[j] /= float_n;\n    }\n\n\n   for (j = 0; j < _PB_M; j++)\n    {\n      stddev[j] = SCALAR_VAL(0.0);\n      for (i = 0; i < _PB_N; i++)\n        stddev[j] += (data[i][j] - mean[j]) * (data[i][j] - mean[j]);\n      stddev[j] /= float_n;\n      stddev[j] = SQRT_FUN(stddev[j]);\n      /* The following in an inelegant but usual way to handle\n         near-zero std. dev. values, which below would cause a zero-\n         divide. */\n      stddev[j] = stddev[j] <= eps ? SCALAR_VAL(1.0) : stddev[j];\n    }\n\n  /* Center and reduce the column vectors. */\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_M; j++)\n      {\n        data[i][j] -= mean[j];\n        data[i][j] /= SQRT_FUN(float_n) * stddev[j];\n      }\n\n  /* Calculate the m * m correlation matrix. */\n  for (i = 0; i < _PB_M-1; i++)\n    {\n      corr[i][i] = SCALAR_VAL(1.0);\n      for (j = i+1; j < _PB_M; j++)\n        {\n          corr[i][j] = SCALAR_VAL(0.0);\n          for (k = 0; k < _PB_N; k++)\n            corr[i][j] += (data[k][i] * data[k][j]);\n          corr[j][i] = corr[i][j];\n        }\n    }\n  corr[_PB_M-1][_PB_M-1] = SCALAR_VAL(1.0);\n"
    },
    "covariance.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    \n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            if (i < j) {\n                \n                data[i][j] = ((DATA_TYPE) i * j) / (M * 0.1);\n            } else if (i > j) {\n                \n                data[i][j] = ((DATA_TYPE) i * j) / (M * 10.0);\n            } else {\n                \n                data[i][j] = ((DATA_TYPE) i * j) / M;\n            }\n\n            \n            if ((i + j) % 10 == 0) {\n                \n                data[i][j] = -1000.0;\n            } else if ((i + j) % 5 == 0) {\n                \n                data[i][j] = 1e-10;\n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1);\n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2);\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3);\n            }\n\n            \n            if (i % 10 == 0 && j % 10 == 0) {\n                data[i][j] = 1e6; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e6; \n            } else if (i % 12 == 0 && j % 12 == 0) {\n                data[i][j] = 1e-6; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -1e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 4 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1000.0;\n            } else if ((i + j) % 4 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 1000.0;\n            } else if ((i + j) % 4 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 0.001;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 0.001;\n            }\n\n            \n            if (i % 5 == 0 && j % 5 == 0) {\n                data[i][j] = 1e5; \n            } else if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = -1e5; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = 1e-5; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -1e-5; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 5000.0;\n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 5000.0;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 0.0001;\n            }\n\n            \n            if (i % 10 == 0 && j % 10 == 0) {\n                data[i][j] = 1e6; \n            } else if (i % 15 == 0 && j % 15 == 0) {\n                data[i][j] = -1e6; \n            } else if (i % 20 == 0 && j % 20 == 0) {\n                data[i][j] = 1e-6; \n            } else if (i % 25 == 0 && j % 25 == 0) {\n                data[i][j] = -1e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 5 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 10000.0;\n            } else if ((i + j) % 5 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 10000.0;\n            } else if ((i + j) % 5 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 0.001;\n            } else if ((i + j) % 5 == 3) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 0.001;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 5) + 5000.0;\n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 2e6; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -2e6; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = 2e-6; \n            } else if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = -2e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i * j) % 5 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 500.0;\n            } else if ((i * j) % 5 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 500.0;\n            } else if ((i * j) % 5 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 0.005;\n            } else if ((i * j) % 5 == 3) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 0.005;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 5) + 100.0;\n            }\n\n            \n            if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = 1e7; \n            } else if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = -1e7; \n            } else if (i % 23 == 0 && j % 23 == 0) {\n                data[i][j] = 1e-7; \n            } else if (i % 29 == 0 && j % 29 == 0) {\n                data[i][j] = -1e-7; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            \n            if ((i + j) % 4 == 0) {\n                data[i][j] = sin((DATA_TYPE)i * j / (M + 1)) * 1000.0;\n            } else if ((i + j) % 4 == 1) {\n                data[i][j] = cos((DATA_TYPE)i * j / (M + 2)) * 2000.0;\n            } else if ((i + j) % 4 == 2) {\n                data[i][j] = sin((DATA_TYPE)i * j / (M + 3)) * 3000.0;\n            } else {\n                data[i][j] = cos((DATA_TYPE)i * j / (M + 4)) * 4000.0;\n            }\n\n            \n            if (i % 5 == 0 && j % 5 == 0) {\n                data[i][j] = 1e7; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1e7; \n            } else if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = 1e-7; \n            } else if (i % 23 == 0 && j % 23 == 0) {\n                data[i][j] = -1e-7; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            \n            if ((i + j) % 4 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1e5; \n            } else if ((i + j) % 4 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 1e5; \n            } else if ((i + j) % 4 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 1e-5; \n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 1e-5; \n            }\n\n            \n            if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = 0.0; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = 1.0; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1.0; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if (i % 2 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + (DATA_TYPE)i / (j + 1);\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - (DATA_TYPE)j / (i + 1);\n            }\n\n            \n            if (i % 15 == 0 && j % 15 == 0) {\n                data[i][j] = 1e8; \n            } else if (i % 16 == 0 && j % 16 == 0) {\n                data[i][j] = -1e8; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = 1e-8; \n            } else if (i % 18 == 0 && j % 18 == 0) {\n                data[i][j] = -1e-8; \n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] += (DATA_TYPE)rand() / RAND_MAX * 100;\n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            data[i][j] = (DATA_TYPE)i * j / (M + 1) + (DATA_TYPE)rand() / RAND_MAX * 1000.0;\n\n            \n            if (i % 10 == 0 && j % 10 == 0) {\n                data[i][j] = 1e6; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e6; \n            } else if (i % 12 == 0 && j % 12 == 0) {\n                data[i][j] = 1e-6; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -1e-6; \n            }\n\n            \n            if (i % 5 == 0 && j % 5 == 0) {\n                data[i][j] += (DATA_TYPE)rand() / RAND_MAX * 100;\n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i * j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)(i + j) * 100.0;\n            } else if ((i * j) % 3 == 1) {\n                data[i][j] = -(DATA_TYPE)(i + j) * 50.0;\n            } else {\n                data[i][j] = (DATA_TYPE)(i * j) / (M + 1) * 20.0;\n            }\n\n            \n            if (i % 10 == 0 && j % 10 == 0) {\n                data[i][j] = 1e6; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e6; \n            } else if (i % 12 == 0 && j % 12 == 0) {\n                data[i][j] = 1e-6; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -1e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1e3; \n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 1e3; \n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 1e-3; \n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 100.0; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -100.0; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = 1e-6; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1000.0 * sin((DATA_TYPE)i) + 500.0 * cos((DATA_TYPE)j);\n\n            \n            if ((i + j) % 13 == 0) {\n                data[i][j] = 2e6; \n            } else if ((i + j) % 17 == 0) {\n                data[i][j] = -2e6; \n            } else if ((i + j) % 19 == 0) {\n                data[i][j] = 1e-6; \n            } else if ((i + j) % 23 == 0) {\n                data[i][j] = -1e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            data[i][j] = (DATA_TYPE)(i * j) / (M + 1) + 5000.0 * sin((i + j) * 0.1);\n\n            \n            if ((i * j) % 100 == 0) {\n                data[i][j] *= 1000.0; \n            } else if ((i * j) % 77 == 0) {\n                data[i][j] /= 1000.0; \n            }\n\n            \n            data[i][j] += (DATA_TYPE)rand() / RAND_MAX * 100.0 - 50.0;\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            data[i][j] = (DATA_TYPE)i * j / (M + 1) + 10000.0 * sin((DATA_TYPE)i * j / (M + 1));\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 1e8; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e8; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = 1e-8; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1e-8; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 5 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) * 10.0;\n            } else if ((i + j) % 5 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) * -10.0;\n            } else if ((i + j) % 5 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) * 100.0;\n            } else if ((i + j) % 5 == 3) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) * -100.0;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 5) * 0.1;\n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 1e5; \n            } else if (i % 9 == 0 && j % 9 == 0) {\n                data[i][j] = -1e5; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = 1e-5; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -1e-5; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 5 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1e6; \n            } else if ((i + j) % 5 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 1e6; \n            } else if ((i + j) % 5 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 1e-6; \n            } else if ((i + j) % 5 == 3) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 1e-6; \n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 5) + 0.0; \n            }\n\n            \n            if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = 1e9; \n            } else if (i % 23 == 0 && j % 23 == 0) {\n                data[i][j] = -1e9; \n            } else if (i % 29 == 0 && j % 29 == 0) {\n                data[i][j] = 1e-9; \n            } else if (i % 31 == 0 && j % 31 == 0) {\n                data[i][j] = -1e-9; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) * 1000.0;\n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) * -1000.0;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) * 0.001;\n            }\n\n            \n            if (i % 5 == 0 && j % 5 == 0) {\n                data[i][j] = 1e6; \n            } else if (i % 6 == 0 && j % 6 == 0) {\n                data[i][j] = -1e6; \n            } else if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 1e-6; \n            } else if (i % 8 == 0 && j % 8 == 0) {\n                data[i][j] = -1e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = sin((DATA_TYPE)i * j / (M + 1)) * 5000.0;\n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = cos((DATA_TYPE)i * j / (M + 2)) * 6000.0;\n            } else {\n                data[i][j] = sin((DATA_TYPE)i * j / (M + 3)) * 7000.0;\n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 1e8; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e8; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = 1e-8; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1e-8; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            data[i][j] = (DATA_TYPE)i * j / (M + 1) + (DATA_TYPE)rand() / RAND_MAX * 2000.0 - 1000.0;\n\n            \n            if ((i + j) % 15 == 0) {\n                data[i][j] = 1e8; \n            } else if ((i + j) % 16 == 0) {\n                data[i][j] = -1e8; \n            } else if ((i + j) % 17 == 0) {\n                data[i][j] = 1e-8; \n            } else if ((i + j) % 18 == 0) {\n                data[i][j] = -1e-8; \n            }\n\n            \n            if (rand() % 100 == 0) {\n                data[i][j] *= (DATA_TYPE)rand() / RAND_MAX * 10.0; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1e7; \n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 1e7; \n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 1e-7; \n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 1e10; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e10; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = 1e-10; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1e-10; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i * j) % 10 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 20000.0;\n            } else if ((i * j) % 10 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 20000.0;\n            } else if ((i * j) % 10 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 0.002;\n            } else if ((i * j) % 10 == 3) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 0.002;\n            } else if ((i * j) % 10 == 4) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 5) + 7000.0;\n            } else if ((i * j) % 10 == 5) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 6) - 7000.0;\n            } else if ((i * j) % 10 == 6) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 7) + 0.003;\n            } else if ((i * j) % 10 == 7) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 8) - 0.003;\n            } else if ((i * j) % 10 == 8) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 9) + 10000.0;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 10) - 10000.0;\n            }\n\n            \n            if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = 3e6; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -3e6; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = 3e-6; \n            } else if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = -3e-6; \n            }\n\n            \n            if ((i + j) % 23 == 0) {\n                data[i][j] += (DATA_TYPE)rand() / RAND_MAX * 300;\n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 4 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 10000.0;\n            } else if ((i + j) % 4 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 10000.0;\n            } else if ((i + j) % 4 == 2) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 0.00001;\n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 4) - 0.00001;\n            }\n\n            \n            if (i % 7 == 0 && j % 7 == 0) {\n                data[i][j] = 1e8; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = -1e8; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = 1e-8; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = -1e-8; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1000.0 * sin((i + j) * 0.05) + (DATA_TYPE)rand() / RAND_MAX * 500.0;\n\n            \n            if ((i + j) % 20 == 0) {\n                data[i][j] *= 2.0; \n            } else if ((i + j) % 15 == 0) {\n                data[i][j] /= 2.0; \n            }\n\n            \n            if (i % 30 == 0 && j % 30 == 0) {\n                data[i][j] = 1e7; \n            } else if (i % 25 == 0 && j % 25 == 0) {\n                data[i][j] = -1e7; \n            }\n\n            \n            if ((i * j) % 3 == 0) {\n                data[i][j] += (DATA_TYPE)rand() / RAND_MAX * 200.0 - 100.0;\n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = 1000.0 * sin((i + j) * 0.05) + 500.0 * cos((i - j) * 0.05);\n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = 2000.0 * cos((i + j) * 0.05) - 300.0 * sin((i - j) * 0.05);\n            } else {\n                data[i][j] = 1500.0 * sin((i + j) * 0.05) + 400.0 * cos((i - j) * 0.05);\n            }\n\n            \n            data[i][j] += (DATA_TYPE)rand() / RAND_MAX * 200.0 - 100.0;\n\n            \n            if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = 3e6; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -3e6; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = 3e-6; \n            } else if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = -3e-6; \n            }\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE *float_n,\n                DATA_TYPE POLYBENCH_2D(data, N, M, n, m))\n{\n    int i, j;\n\n    *float_n = (DATA_TYPE)n;\n\n    for (i = 0; i < N; i++) {\n        for (j = 0; j < M; j++) {\n            \n            if ((i + j) % 3 == 0) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 1) + 1e6; \n            } else if ((i + j) % 3 == 1) {\n                data[i][j] = (DATA_TYPE)i * j / (M + 2) - 1e6; \n            } else {\n                data[i][j] = (DATA_TYPE)i * j / (M + 3) + 1e-6; \n            }\n\n            \n            if (i % 5 == 0 && j % 5 == 0) {\n                data[i][j] = 0.0; \n            } else if (i % 11 == 0 && j % 11 == 0) {\n                data[i][j] = 1.0; \n            } else if (i % 13 == 0 && j % 13 == 0) {\n                data[i][j] = -1.0; \n            } else if (i % 17 == 0 && j % 17 == 0) {\n                data[i][j] = 1e10; \n            } else if (i % 19 == 0 && j % 19 == 0) {\n                data[i][j] = -1e10; \n            }\n        }\n    }\n}\n"
        ],
        "code": "\n  for (j = 0; j < _PB_M; j++)\n    {\n      mean[j] = SCALAR_VAL(0.0);\n      for (i = 0; i < _PB_N; i++)\n        mean[j] += data[i][j];\n      mean[j] /= float_n;\n    }\n\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_M; j++)\n      data[i][j] -= mean[j];\n\n  for (i = 0; i < _PB_M; i++)\n    for (j = i; j < _PB_M; j++)\n      {\n        cov[i][j] = SCALAR_VAL(0.0);\n        for (k = 0; k < _PB_N; k++)\n\t  cov[i][j] += data[k][i] * data[k][j];\n        cov[i][j] /= (float_n - SCALAR_VAL(1.0));\n        cov[j][i] = cov[i][j];\n      }\n"
    },
    "gemm.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (2 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (2 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (2 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (3 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+4) % nj) / (3 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+1) % nk) / (5 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (5 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (10 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (10 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (10 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+1) % nk) / (5 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+4) % nj) / (5 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (4 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (4 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (4 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 2.0;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (5 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (5 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+4) % nj) / (5 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (3 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+1) % nk) / (3 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (3 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (15 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (15 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (15 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (10 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+5) % nk) / (10 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+6) % nj) / (10 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (10 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+1) % nk) / (10 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (10 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (8 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+1) % nk) / (8 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+4) % nj) / (8 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.0;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (5 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (5 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+4) % nj) / (5 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (4 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (4 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (4 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (10 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (10 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (10 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (3 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (3 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+10) % ni) / (15 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+5) % nk) / (15 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+7) % nj) / (15 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (5 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (5 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+4) % nj) / (5 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (10 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (10 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+1) % nj) / (10 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.8;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (3 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (4 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (6 * nj);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk,\n                DATA_TYPE *alpha,\n                DATA_TYPE *beta,\n                DATA_TYPE POLYBENCH_2D(C,NI,NJ,ni,nj),\n                DATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n                DATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 2.0;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nj; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (5 * ni);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (5 * nk);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (5 * nj);\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_NI; i++) {\n    for (j = 0; j < _PB_NJ; j++)\n\tC[i][j] *= beta;\n    for (k = 0; k < _PB_NK; k++) {\n       for (j = 0; j < _PB_NJ; j++)\n\t  C[i][j] += alpha * A[i][k] * B[k][j];\n    }\n  }\n"
    },
    "gemver.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 1.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 3.0;\n      v1[i] = ((i+1)/fn) * 5.0;\n      v2[i] = ((i+1)/fn) * 7.0;\n      y[i] = ((i+1)/fn) * 11.0;\n      z[i] = ((i+1)/fn) * 13.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (2 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 2.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 4.5;\n      v1[i] = ((i+1)/fn) * 6.5;\n      v2[i] = ((i+1)/fn) * 8.5;\n      y[i] = ((i+1)/fn) * 12.0;\n      z[i] = ((i+1)/fn) * 14.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (3 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 4.0;\n  *beta = 1.8;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 3.0;\n      v1[i] = ((i+1)/fn) * 5.0;\n      v2[i] = ((i+1)/fn) * 7.0;\n      y[i] = ((i+1)/fn) * 10.0;\n      z[i] = ((i+1)/fn) * 12.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 2.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 2.5;\n      v1[i] = ((i+1)/fn) * 4.5;\n      v2[i] = ((i+1)/fn) * 6.5;\n      y[i] = ((i+1)/fn) * 8.5;\n      z[i] = ((i+1)/fn) * 10.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (3 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.5;\n  *beta = 2.2;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 4.0;\n      v1[i] = ((i+1)/fn) * 6.0;\n      v2[i] = ((i+1)/fn) * 8.0;\n      y[i] = ((i+1)/fn) * 12.0;\n      z[i] = ((i+1)/fn) * 14.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (4 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 1.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 3.0;\n      v1[i] = ((i+1)/fn) * 5.0;\n      v2[i] = ((i+1)/fn) * 7.0;\n      y[i] = ((i+1)/fn) * 10.0;\n      z[i] = ((i+1)/fn) * 12.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 2.0;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.0;\n      u2[i] = ((i+1)/fn) * 1.5;\n      v1[i] = ((i+1)/fn) * 2.0;\n      v2[i] = ((i+1)/fn) * 2.5;\n      y[i] = ((i+1)/fn) * 3.0;\n      z[i] = ((i+1)/fn) * 3.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (4 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 4.0;\n  *beta = 3.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 3.0;\n      v1[i] = ((i+1)/fn) * 5.0;\n      v2[i] = ((i+1)/fn) * 7.0;\n      y[i] = ((i+1)/fn) * 9.0;\n      z[i] = ((i+1)/fn) * 11.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (4 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 1.0;\n  *beta = 0.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 0.5;\n      u2[i] = ((i+1)/fn) * 1.5;\n      v1[i] = ((i+1)/fn) * 2.5;\n      v2[i] = ((i+1)/fn) * 3.5;\n      y[i] = ((i+1)/fn) * 4.5;\n      z[i] = ((i+1)/fn) * 5.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (10 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 2.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 2.5;\n      v1[i] = ((i+1)/fn) * 4.5;\n      v2[i] = ((i+1)/fn) * 6.5;\n      y[i] = ((i+1)/fn) * 9.5;\n      z[i] = ((i+1)/fn) * 11.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (10 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.8;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.0;\n      u2[i] = ((i+1)/fn) * 2.0;\n      v1[i] = ((i+1)/fn) * 3.0;\n      v2[i] = ((i+1)/fn) * 4.0;\n      y[i] = ((i+1)/fn) * 5.0;\n      z[i] = ((i+1)/fn) * 6.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (8 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.7;\n  *beta = 3.3;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 2.2;\n      v1[i] = ((i+1)/fn) * 3.1;\n      v2[i] = ((i+1)/fn) * 4.5;\n      y[i] = ((i+1)/fn) * 5.5;\n      z[i] = ((i+1)/fn) * 6.7;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.8;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 3.0;\n      v1[i] = ((i+1)/fn) * 5.0;\n      v2[i] = ((i+1)/fn) * 7.0;\n      y[i] = ((i+1)/fn) * 10.0;\n      z[i] = ((i+1)/fn) * 12.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 1.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 0.75;\n      u2[i] = ((i+1)/fn) * 1.75;\n      v1[i] = ((i+1)/fn) * 2.75;\n      v2[i] = ((i+1)/fn) * 3.75;\n      y[i] = ((i+1)/fn) * 4.75;\n      z[i] = ((i+1)/fn) * 5.75;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.5;\n  *beta = 2.2;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 2.5;\n      v1[i] = ((i+1)/fn) * 4.5;\n      v2[i] = ((i+1)/fn) * 6.5;\n      y[i] = ((i+1)/fn) * 8.5;\n      z[i] = ((i+1)/fn) * 10.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.7;\n  *beta = 3.1;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.5;\n      u2[i] = ((i+1)/fn) * 3.5;\n      v1[i] = ((i+1)/fn) * 5.5;\n      v2[i] = ((i+1)/fn) * 7.5;\n      y[i] = ((i+1)/fn) * 11.0;\n      z[i] = ((i+1)/fn) * 13.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (6 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.7;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 2.5;\n      v1[i] = ((i+1)/fn) * 3.5;\n      v2[i] = ((i+1)/fn) * 4.5;\n      y[i] = ((i+1)/fn) * 5.5;\n      z[i] = ((i+1)/fn) * 6.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (3 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 2.0;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.0;\n      u2[i] = ((i+1)/fn) * 1.5;\n      v1[i] = ((i+1)/fn) * 2.0;\n      v2[i] = ((i+1)/fn) * 2.5;\n      y[i] = ((i+1)/fn) * 3.0;\n      z[i] = ((i+1)/fn) * 3.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (15 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 4.0;\n  *beta = 3.0;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 2.0;\n      u2[i] = ((i+1)/fn) * 3.0;\n      v1[i] = ((i+1)/fn) * 5.0;\n      v2[i] = ((i+1)/fn) * 7.0;\n      y[i] = ((i+1)/fn) * 10.0;\n      z[i] = ((i+1)/fn) * 12.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (8 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 4.2;\n  *beta = 1.8;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 3.0;\n      u2[i] = ((i+1)/fn) * 2.0;\n      v1[i] = ((i+1)/fn) * 7.0;\n      v2[i] = ((i+1)/fn) * 9.0;\n      y[i] = ((i+1)/fn) * 15.0;\n      z[i] = ((i+1)/fn) * 16.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (4 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 2.0;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 0.5;\n      u2[i] = ((i+1)/fn) * 1.5;\n      v1[i] = ((i+1)/fn) * 2.5;\n      v2[i] = ((i+1)/fn) * 3.5;\n      y[i] = ((i+1)/fn) * 4.5;\n      z[i] = ((i+1)/fn) * 5.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (20 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.5;\n  *beta = 2.2;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 1.5;\n      u2[i] = ((i+1)/fn) * 4.0;\n      v1[i] = ((i+1)/fn) * 6.0;\n      v2[i] = ((i+1)/fn) * 8.0;\n      y[i] = ((i+1)/fn) * 11.0;\n      z[i] = ((i+1)/fn) * 13.0;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (4 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 4.2;\n  *beta = 1.8;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 0.75;\n      u2[i] = ((i+1)/fn) * 1.25;\n      v1[i] = ((i+1)/fn) * 3.75;\n      v2[i] = ((i+1)/fn) * 5.25;\n      y[i] = ((i+1)/fn) * 7.5;\n      z[i] = ((i+1)/fn) * 9.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (8 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE *alpha,\n                 DATA_TYPE *beta,\n                 DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n                 DATA_TYPE POLYBENCH_1D(u1,N,n),\n                 DATA_TYPE POLYBENCH_1D(v1,N,n),\n                 DATA_TYPE POLYBENCH_1D(u2,N,n),\n                 DATA_TYPE POLYBENCH_1D(v2,N,n),\n                 DATA_TYPE POLYBENCH_1D(w,N,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n),\n                 DATA_TYPE POLYBENCH_1D(y,N,n),\n                 DATA_TYPE POLYBENCH_1D(z,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      u1[i] = i * 0.5;\n      u2[i] = ((i+1)/fn) * 1.5;\n      v1[i] = ((i+1)/fn) * 2.5;\n      v2[i] = ((i+1)/fn) * 3.5;\n      y[i] = ((i+1)/fn) * 4.5;\n      z[i] = ((i+1)/fn) * 5.5;\n      x[i] = 0.0;\n      w[i] = 0.0;\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE) (i*j % n) / (16 * n);\n    }\n}\n"
        ],
        "code": "\n\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_N; j++)\n      A[i][j] = A[i][j] + u1[i] * v1[j] + u2[i] * v2[j];\n\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_N; j++)\n      x[i] = x[i] + beta * A[j][i] * y[j];\n\n  for (i = 0; i < _PB_N; i++)\n    x[i] = x[i] + z[i];\n\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_N; j++)\n      w[i] = w[i] +  alpha * A[i][j] * x[j];\n\n"
    },
    "gesummv.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i + j) % n) / (2 * n);\n\tB[i][j] = (DATA_TYPE) ((i - j) % n) / (2 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j * j) % n) / (3 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i * j) % n) / (3 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 2 * i + 1) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i + j + 3) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j + 4) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i + j * j) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i - j * j) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i + j * j) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i * i + j * j * j) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i + j * j) % n) / (3 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i - j * j) % n) / (3 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + i + j) % n) / (3 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j - i - j) % n) / (3 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 1) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j - 1) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 2 * i + 1) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 2 * i + 3 * j) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j - 2 * i - 3 * j) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j * i + j) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j * i - j) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i + i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j * j + 2) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i * j - 2) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 2 * i + 1) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i + j + 1) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i - j + 2) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 3 * i + 2) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 3 * i + 4 * j) % n) / (6 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j - 3 * i - 4 * j) % n) / (6 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i + i * i + i + 1) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j * j + i * i + j + 2) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j * j - i * i + j + 3) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 3 * i + 2) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i + j + 5) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j + 6) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i + 2 * i * i + i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i * i + j * j * j + i * j) % n) / (7 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i * i * i + j * j * j * j + i * j * j) % n) / (7 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 2 * i + 3) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 2 * i + 3 * j + 4) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j - 2 * i + 3 * j - 4) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i + j * j) % n) / (3 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j * j) % n) / (3 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i + 3 * i * i + 2 * i + 5) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i * i + j * j * j * j + 4 * i * j + 3 * i + 2 * j + 7) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i * i * i + j * j * j + 5 * i * j + 2 * i + 3 * j + 8) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 2.0;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 3 * i + 5) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i + j + 3) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i - j + 4) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 3 * i + 2) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 3 * i + 2 * j) % n) / (6 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j - 3 * i - 2 * j) % n) / (6 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 2 * i + 1) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + i + j) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j * j + j * i * i) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i * i + 2 * i * i + i + 4) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i * i * i * i + j * j * j * j + 3 * i * j * j + 2 * i * i * j + 5) % n) / (6 * n);\n\tB[i][j] = (DATA_TYPE) ((i * i * i * i + j * j * j * j * j + 4 * i * j * j + 3 * i * i * j + 6) % n) / (6 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 2.0;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i + 3 * i + 5) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 2) % n) / (5 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j + 1) % n) / (5 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i + 3 * i + 2) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * j + 2 * i + j) % n) / (4 * n);\n\tB[i][j] = (DATA_TYPE) ((i * j * j + 2 * j * i * i) % n) / (4 * n);\n      }\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_1D(x,N,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    {\n      x[i] = (DATA_TYPE)( (i * i * i + 3 * i * i + 2 * i + 5) % n) / n;\n      for (j = 0; j < n; j++) {\n\tA[i][j] = (DATA_TYPE) ((i * i * i * i + 2 * j * j * j + 4 * i * j + 1) % n) / (7 * n);\n\tB[i][j] = (DATA_TYPE) ((j * j * j * j + 3 * i * i * i + 5 * i * j + 2) % n) / (7 * n);\n      }\n    }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++)\n    {\n      tmp[i] = SCALAR_VAL(0.0);\n      y[i] = SCALAR_VAL(0.0);\n      for (j = 0; j < _PB_N; j++)\n\t{\n\t  tmp[i] = A[i][j] * x[j] + tmp[i];\n\t  y[i] = B[i][j] * x[j] + y[i];\n\t}\n      y[i] = alpha * tmp[i] + beta * y[i];\n    }\n"
    },
    "symm.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 1.2;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) (i * n + j) / (m * n); \n      B[i][j] = (DATA_TYPE) (j * m + i) / (m * n); \n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) (i * m + j) / (m * m); \n    for (j = i+1; j < m; j++)\n      A[i][j] = 0; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j) % 100) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j) % 100) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j) % 100) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i + j) % 50) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i * j) % 50) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i + j) % 50) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 25) % 75) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 50) % 75) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j + 75) % 75) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -3; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.8;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * i + j * j) % 100) / (m * m + n * n);\n      B[i][j] = (DATA_TYPE) ((i * j + 1) % 100) / (m * n + 1);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * i - j * j) % 100) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 2) % 75) / (m * n + 2);\n      B[i][j] = (DATA_TYPE) ((i + j + 3) % 75) / (m + n + 3);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * i + j + 4) % 75) / (m * m + 4);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 50) % 125) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 75) % 125) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j + 100) % 125) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j) % 100) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j) % 100) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * j) % 100) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 10) % 50) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 30) % 50) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j + 50) % 50) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 20) % 60) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 40) % 60) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j + 60) % 60) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -3; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.75;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 10) % 50) / (m * n + 10);\n      B[i][j] = (DATA_TYPE) ((i + j + 20) % 50) / (m + n + 20);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * i + j + 5) % 50) / (m * m + 5);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 25) % 75) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 100) % 75) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j + 50) % 75) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i + j) % 20) / (m + n);\n      B[i][j] = (DATA_TYPE) ((i * j + 5) % 30) / (m * n + 10);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i + j) % 15) / (m + n);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -3; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 10) % 100) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 20) % 100) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i - j + 50) % 100) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i + j) % 10) / 10.0;\n      B[i][j] = (DATA_TYPE) ((i * j) % 10) / 10.0;\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i + j) % 5) / 5.0;\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1.0; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 1.0;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 1) % 100) / (m * n + 1);\n      B[i][j] = (DATA_TYPE) ((i + j + 5) % 100) / (m + n + 5);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * i + j + 6) % 100) / (m * m + 6);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -3; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j) % 50) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j * 2) % 60) / (m + n * 2);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * j) % 25) / (m * n);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 2.0;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * i + j * j) % 100) / (m * m + n * n);\n      B[i][j] = (DATA_TYPE) ((i - j) % 100) / (m + n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * i - j * j) % 100) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.5;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 25) % 60) / (m * n + 25);\n      B[i][j] = (DATA_TYPE) ((i + j + 30) % 60) / (m + n + 30);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * i + j + 10) % 60) / (m * m + 10);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,M,M,m,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,M,N,m,n))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i * j + 50) % 100) / (m * n);\n      B[i][j] = (DATA_TYPE) ((i + j + 75) % 100) / (m * n);\n    }\n  for (i = 0; i < m; i++) {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE) ((i * j + 25) % 100) / (m * m);\n    for (j = i+1; j < m; j++)\n      A[i][j] = -1; \n  }\n}\n"
        ],
        "code": "\n   for (i = 0; i < _PB_M; i++)\n      for (j = 0; j < _PB_N; j++ )\n      {\n        temp2 = 0;\n        for (k = 0; k < i; k++) {\n           C[k][j] += alpha*B[i][j] * A[i][k];\n           temp2 += B[k][j] * A[i][k];\n        }\n        C[i][j] = beta * C[i][j] + alpha*B[i][j] * A[i][i] + alpha * temp2;\n     }\n"
    },
    "syr2k.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+2)%m) / m;\n      B[i][j] = (DATA_TYPE) ((i*j+3)%n) / n;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+4)%m) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+4)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+5)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+6)%n) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+5)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+6)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+7)%n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+1)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+7)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+8)%m) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+1)%n) / (2*n);\n      B[i][j] = (DATA_TYPE) ((i*j+2)%m) / (2*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+3)%n) / (2*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+5)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+6)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+7)%n) / (3*n);\n      B[i][j] = (DATA_TYPE) ((i*j+8)%m) / (3*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+11)%n) / (3*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+10)%n) / (5*n);\n      B[i][j] = (DATA_TYPE) ((i*j+11)%m) / (5*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+12)%n) / (5*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+5)%n) / (2*n);\n      B[i][j] = (DATA_TYPE) ((i*j+6)%m) / (2*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / (2*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+1)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+8)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%m) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+7)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+8)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+5)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+2)%n) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+4)%n) / (3*n);\n      B[i][j] = (DATA_TYPE) ((i*j+5)%m) / (3*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+6)%n) / (3*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+1)%n) / (10*n);\n      B[i][j] = (DATA_TYPE) ((i*j+2)%m) / (10*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+3)%n) / (10*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+10)%n) / (2*n);\n      B[i][j] = (DATA_TYPE) ((i*j+11)%m) / (2*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+12)%n) / (2*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+4)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+2)%n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.8;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+7)%n) / (5*n);\n      B[i][j] = (DATA_TYPE) ((i*j+8)%m) / (5*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / (5*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+1)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+2)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+3)%n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+5)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+6)%n) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+2)%n) / (5*n);\n      B[i][j] = (DATA_TYPE) ((i*j+3)%m) / (5*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / (5*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.0;\n  *beta = 2.0;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / (10*n);\n      B[i][j] = (DATA_TYPE) ((i*j+4)%m) / (10*m);\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+7)%n) / (10*n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+11)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+13)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+15)%n) / m;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+2)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+3)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\tDATA_TYPE POLYBENCH_2D(B,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++) {\n      A[i][j] = (DATA_TYPE) ((i*j+10)%n) / n;\n      B[i][j] = (DATA_TYPE) ((i*j+11)%m) / m;\n    }\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      C[i][j] = (DATA_TYPE) ((i*j+12)%n) / n;\n    }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++) {\n    for (j = 0; j <= i; j++)\n      C[i][j] *= beta;\n    for (k = 0; k < _PB_M; k++)\n      for (j = 0; j <= i; j++)\n\t{\n\t  C[i][j] += A[j][k]*alpha*B[i][k] + B[j][k]*alpha*A[i][k];\n\t}\n  }\n"
    },
    "syrk.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;  \n  *beta = 0.5;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2)%m) / m;  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+3)%n) / n;  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+4)%n) / (n + 1);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+5)%m) / (m + 1);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;  \n  *beta = 0.75;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+4)%m) / m;  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+5)%n) / n;  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7)%n) / (2 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+8)%m) / (2 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+10)%n) / (3 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+12)%m) / (3 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;  \n  *beta = 0.25;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+6)%m) / m;  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+7)%n) / n;  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;  \n  *beta = 1.0;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5)%m) / (5 * m);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+10)%n) / (5 * n);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;  \n  *beta = 0.5;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / (n + 1);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+4)%m) / (m + 1);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.8;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / (3 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+7)%m) / (7 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.0;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5)%n) / (5 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+11)%m) / (11 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7)%n) / (2 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+9)%m) / (2 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7)%n) / (2 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+9)%m) / (4 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;  \n  *beta = 0.5;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7)%m) / (5 * m);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+8)%n) / (4 * n);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;  \n  *beta = 0.75;  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+11)%n) / (3 * n);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+13)%m) / (3 * m);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;  \n  *beta = 0.5;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+8)%m) / m;  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / n;  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;  \n  *beta = 1.0;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5)%m) / (m + 1);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+11)%n) / (n + 2);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 2.0;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3)%n) / (3 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+12)%m) / (6 * m);\n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;  \n  *beta = 0.75;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+10)%m) / (3 * m);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+11)%n) / (3 * n);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;  \n  *beta = 0.75;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5)%n) / (2 * n);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+6)%m) / (2 * m);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;  \n  *beta = 2.0;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7)%m) / (7 * m);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+13)%n) / (13 * n);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 2.0;  \n  *beta = 0.5;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+8)%m) / (m + 2);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+9)%n) / (n + 2);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 3.0;  \n  *beta = 1.5;   \n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5)%m) / (3 * m);  \n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+11)%n) / (3 * n);  \n}\n",
            "\nstatic\nvoid init_array(int n, int m,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(C,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,M,n,m))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < n; i++)\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+11)%n) / (3 * n);\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      C[i][j] = (DATA_TYPE) ((i*j+13)%m) / (5 * m);\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++) {\n    for (j = 0; j <= i; j++)\n      C[i][j] *= beta;\n    for (k = 0; k < _PB_M; k++) {\n      for (j = 0; j <= i; j++)\n        C[i][j] += alpha * A[i][k] * A[j][k];\n    }\n  }\n"
    },
    "trmm.check.c": {
        "init_func": [
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * j) % m) / m;  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i + j) % n) / n;  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j * j) % m) / m;  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j) % n) / n;  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i - j) % m) / (2 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((m - i + j) % n) / (2 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * j + 1) % m) / m;  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i + j * j) % n) / n;  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * j + 2) % m) / (2 * m);  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i + j) % n) / (2 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * j + 1) % m) / m;  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i + j * j + 2) % n) / n;  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 1.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j * j) % m) / (3 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j) % n) / (3 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i + j) % m) / (2 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i - j) % n) / (2 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j * j) % m) / (3 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j) % n) / (3 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j * j) % m) / m;  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j) % n) / n;  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)(((i * j) % (m + 1)) - (m / 2)) / (m * 2);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)(((i * j) % (n + 1)) - (n / 2)) / (n * 2);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i + j) % m) / (4 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i + j) % n) / (4 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 5.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i + j) % m) / (5 * m);  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i - j) % n) / (5 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j) % m) / (5 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j) % n) / (3 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j) % m) / (5 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j + 3) % n) / (3 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)(((i + j) * (i + j)) % m) / (5 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)(((i - j) * (i - j)) % n) / (5 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i + j) % m) / (2 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i - j) % n) / (4 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * j) % m) / (3 * m);  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * j) % n) / (3 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 1.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)(sin(i) + cos(j)) / (m + 1);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)(sin(i) - cos(j)) / (n + 1);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)(sqrt(i) + pow(j, 2)) / (m + 2);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)(sqrt(i) - pow(j, 3)) / (n + 2);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.0;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * i + j * j) % m) / (10 * m);  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * i - j * j) % n) / (10 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 2.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)(((i + j) * (i + j)) % m) / (10 * m);  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)(((i - j) * (i - j)) % n) / (10 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 3.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)(((i * i) + (j * j)) % m) / (20 * m);  \n        }\n        A[i][i] = 1.0;  \n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)(((i * i) - (j * j)) % n) / (20 * n);  \n        }\n    }\n}\n",
            "\nstatic void init_array(int m, int n,\n                       DATA_TYPE *alpha,\n                       DATA_TYPE POLYBENCH_2D(A, M, M, m, m),\n                       DATA_TYPE POLYBENCH_2D(B, M, N, m, n))\n{\n    int i, j;\n\n    *alpha = 1.5;  \n    for (i = 0; i < m; i++) {\n        for (j = 0; j < i; j++) {\n            A[i][j] = (DATA_TYPE)((i * j) % m) / (5 * m);  \n        }\n        A[i][i] = 1.0;\n        for (j = 0; j < n; j++) {\n            B[i][j] = (DATA_TYPE)((i * j) % n) / (5 * n);  \n        }\n    }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_M; i++)\n     for (j = 0; j < _PB_N; j++) {\n        for (k = i+1; k < _PB_M; k++)\n           B[i][j] += A[k][i] * B[k][j];\n        B[i][j] = alpha * B[i][j];\n     }\n"
    },
    "2mm.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (2 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (2 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+4)+2) % nl) / (2 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (2 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.8;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (3 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+3) % nl) / (3 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (3 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+1) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+6)+1) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+5) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (7 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (7 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+7)+2) % nl) / (7 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+6) % nk) / (7 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+1) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+1) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+1) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+1) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (4 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (4 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+2) % nl) / (4 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (4 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (11 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (11 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+8)+3) % nl) / (11 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+7) % nk) / (11 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (3 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+3)+3) % nl) / (3 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (3 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.0;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+5) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7) % ni) / (7 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+7) % nj) / (7 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+7)+7) % nl) / (7 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+6) % nk) / (7 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.0;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (3 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+3) % nl) / (3 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (3 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+1) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+3)+1) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (ni + 1);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (nj + 1);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+3)+3) % nl) / (nl + 1);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (nk + 1);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (3 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+3)+3) % nl) / (3 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+2) % nk) / (3 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.5;\n  *beta = 0.75;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7) % ni) / (7 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+7) % nj) / (7 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+7)+7) % nl) / (7 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+6) % nk) / (7 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 0.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (4 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (4 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+6)+2) % nl) / (4 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+3) % nk) / (4 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (7 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (7 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+7)+5) % nl) / (7 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+6) % nk) / (7 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+5) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+8) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.75;\n  *beta = 0.875;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+5) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.5;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+5) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (5 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (4 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (4 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+7)+2) % nl) / (4 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+6) % nk) / (4 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 3.0;\n  *beta = 1.0;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (3 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+3) % nj) / (3 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+6)+3) % nl) / (3 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+5) % nk) / (3 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 2.5;\n  *beta = 1.25;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (3 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+2) % nj) / (3 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+6)+2) % nl) / (3 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+5) % nk) / (3 * nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl,\n\t\tDATA_TYPE *alpha,\n\t\tDATA_TYPE *beta,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NL,nj,nl),\n\t\tDATA_TYPE POLYBENCH_2D(D,NI,NL,ni,nl))\n{\n  int i, j;\n\n  *alpha = 1.75;\n  *beta = 0.875;\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (5 * ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) (i*(j+5) % nj) / (5 * nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nl; j++)\n      C[i][j] = (DATA_TYPE) ((i*(j+5)+5) % nl) / (5 * nl);\n  for (i = 0; i < ni; i++)\n    for (j = 0; i < nl; j++)\n      D[i][j] = (DATA_TYPE) (i*(j+4) % nk) / (5 * nk);\n}\n"
        ],
        "code": "\n  /* D := alpha*A*B*C + beta*D */\n  for (i = 0; i < _PB_NI; i++)\n    for (j = 0; j < _PB_NJ; j++)\n      {\n\ttmp[i][j] = SCALAR_VAL(0.0);\n\tfor (k = 0; k < _PB_NK; ++k)\n\t  tmp[i][j] += alpha * A[i][k] * B[k][j];\n      }\n  for (i = 0; i < _PB_NI; i++)\n    for (j = 0; j < _PB_NL; j++)\n      {\n\tD[i][j] *= beta;\n\tfor (k = 0; k < _PB_NJ; ++k)\n\t  D[i][j] += tmp[i][k] * C[k][j];\n      }\n"
    },
    "3mm.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % ni) / (3*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+2)+1) % nj) / (4*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+4) % nl) / (6*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+3)+1) % nk) / (7*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (2*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+3)+3) % nj) / (3*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+5) % nl) / (4*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+4)+4) % nk) / (6*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (7*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+7) % nj) / (11*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+7) % nl) / (13*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+6)+6) % nk) / (17*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+10) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+10)+3) % nj) / (8*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+12) % nl) / (10*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+9)+4) % nk) / (12*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+2) % nj) / (2*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+3) % nl) / (3*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+2)+3) % nk) / (4*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (ni + 1);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+2)+7) % nj) / (nj + 2);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+4) % nl) / (nl + 3);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+3)+5) % nk) / (nk + 4);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+15) % ni) / (10*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+15)+4) % nj) / (16*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+15) % nl) / (20*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+12)+5) % nk) / (24*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+15) % ni) / (3*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+15)+10) % nj) / (6*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+17) % nl) / (9*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+12)+8) % nk) / (15*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (2*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+7) % nj) / (6*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+7) % nl) / (8*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+6)+2) % nk) / (9*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7) % ni) / (2*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+3)+4) % nj) / (5*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+2) % nl) / (4*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+4)+2) % nk) / (6*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+2)+3) % nj) / (7*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+5) % nl) / (11*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+7)+9) % nk) / (13*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7) % ni) / (ni + 1);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+3) % nj) / (nj + 2);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+7) % nl) / (nl + 3);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+4)+1) % nk) / (nk + 4);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+2)+2) % nj) / (7*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+4) % nl) / (3*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+5)+5) % nk) / (4*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+3) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+1)+4) % nj) / (6*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+5) % nl) / (7*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+2)+2) % nk) / (8*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7) % ni) / (2*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+3) % nj) / (4*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+11) % nl) / (6*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+7)+5) % nk) / (8*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+11) % ni) / (3*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+7) % nj) / (4*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+3) % nl) / (5*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+6)+5) % nk) / (7*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+7) % ni) / (3*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+7)+1) % nj) / (4*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+2) % nl) / (5*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+3)+5) % nk) / (7*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+2) % (ni + 1)) / (ni + 2);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+3)+8) % (nj + 2)) / (nj + 3);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+5) % (nl + 3)) / (nl + 4);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+4)+6) % (nk + 4)) / (nk + 5);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+5) % ni) / (10*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+5)+7) % nj) / (15*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+7) % nl) / (20*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+4)+9) % nk) / (25*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+13) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+3)+17) % nj) / (6*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+2) % nl) / (7*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+8)+11) % nk) / (8*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+10) % ni) / (10*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+10)+5) % nj) / (10*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+7) % nl) / (7*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+5)+7) % nk) / (7*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+10) % ni) / (5*ni);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+10)+3) % nj) / (8*nj);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+4) % nl) / (10*nl);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+5)+8) % nk) / (12*nk);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % (ni + 3)) / (ni + 4);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+2)+4) % (nj + 4)) / (nj + 5);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+3) % (nl + 5)) / (nl + 6);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+1)+2) % (nk + 6)) / (nk + 7);\n}\n",
            "\nstatic\nvoid init_array(int ni, int nj, int nk, int nl, int nm,\n\t\tDATA_TYPE POLYBENCH_2D(A,NI,NK,ni,nk),\n\t\tDATA_TYPE POLYBENCH_2D(B,NK,NJ,nk,nj),\n\t\tDATA_TYPE POLYBENCH_2D(C,NJ,NM,nj,nm),\n\t\tDATA_TYPE POLYBENCH_2D(D,NM,NL,nm,nl))\n{\n  int i, j;\n\n  for (i = 0; i < ni; i++)\n    for (j = 0; j < nk; j++)\n      A[i][j] = (DATA_TYPE) ((i*j+1) % (ni + 5)) / (ni + 10);\n  for (i = 0; i < nk; i++)\n    for (j = 0; j < nj; j++)\n      B[i][j] = (DATA_TYPE) ((i*(j+2)+7) % (nj + 3)) / (nj + 15);\n  for (i = 0; i < nj; i++)\n    for (j = 0; j < nm; j++)\n      C[i][j] = (DATA_TYPE) (i*(j+4) % (nl + 2)) / (nl + 20);\n  for (i = 0; i < nm; i++)\n    for (j = 0; j < nl; j++)\n      D[i][j] = (DATA_TYPE) ((i*(j+3)+5) % (nk + 5)) / (nk + 25);\n}\n"
        ],
        "code": "\n  /* E := A*B */\n  for (i = 0; i < _PB_NI; i++)\n    for (j = 0; j < _PB_NJ; j++)\n      {\n\tE[i][j] = SCALAR_VAL(0.0);\n\tfor (k = 0; k < _PB_NK; ++k)\n\t  E[i][j] += A[i][k] * B[k][j];\n      }\n  /* F := C*D */\n  for (i = 0; i < _PB_NJ; i++)\n    for (j = 0; j < _PB_NL; j++)\n      {\n\tF[i][j] = SCALAR_VAL(0.0);\n\tfor (k = 0; k < _PB_NM; ++k)\n\t  F[i][j] += C[i][k] * D[k][j];\n      }\n  /* G := E*F */\n  for (i = 0; i < _PB_NI; i++)\n    for (j = 0; j < _PB_NL; j++)\n      {\n\tG[i][j] = SCALAR_VAL(0.0);\n\tfor (k = 0; k < _PB_NJ; ++k)\n\t  G[i][j] += E[i][k] * F[k][j];\n      }\n"
    },
    "atax.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 2 == 0) ? 1.0 : 2.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j) % n) / (10 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 3.0 : (i % 3 == 1) ? 4.0 : 5.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % (n + 1)) / (7 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 4 == 0) ? 0.5 : (i % 4 == 1) ? 1.5 : (i % 4 == 2) ? 2.5 : 3.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 1) % (n + 2)) / (5 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 2 == 0) ? 1.0 : -1.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % (n / 2)) / (10 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 2.0 : (i % 3 == 1) ? -2.0 : 0.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 2) % (n + 1)) / (8 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 2 == 0) ? 1.5 : 2.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j) % (n + 2)) / (3 * m); \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE POLYBENCH_2D(A, M, N, m, n),\n                DATA_TYPE POLYBENCH_1D(x, N, n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 2 == 0) ? 1.5 : (i % 2 == 1) ? -1.5 : 0.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 1) % (n + 2)) / (5 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 4 == 0) ? 1.5 : (i % 4 == 1) ? -1.5 : (i % 4 == 2) ? 3.0 : -3.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % (n + 2)) / (5 * m); \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE POLYBENCH_2D(A, M, N, m, n),\n                DATA_TYPE POLYBENCH_1D(x, N, n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 1.0 : (i % 3 == 1) ? -1.0 : 2.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % (n + 1)) / (4 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 3.0 : (i % 3 == 1) ? 4.0 : 5.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % (n + 1)) / (5 * m); \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE POLYBENCH_2D(A, M, N, m, n),\n                DATA_TYPE POLYBENCH_1D(x, N, n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 5 == 0) ? 2.5 : (i % 5 == 1) ? -2.5 : (i % 5 == 2) ? 4.0 : (i % 5 == 3) ? -4.0 : 5.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j) % (n + 3)) / (6 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 4 == 0) ? 1.5 : (i % 4 == 1) ? 2.5 : (i % 4 == 2) ? 3.5 : 4.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j) % (n + 2)) / (7 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 2 == 0) ? 1.5 : (i % 2 == 1) ? 2.5 : 3.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j) % (n + 2)) / (3 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 3.0 : (i % 3 == 1) ? 4.0 : 5.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 1) % n) / (7 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 2 == 0) ? 1.5 : 2.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % n) / (3 * m + 1); \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE POLYBENCH_2D(A, M, N, m, n),\n                DATA_TYPE POLYBENCH_1D(x, N, n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 1.0 : (i % 3 == 1) ? -1.0 : 0.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 2) % (n + 1)) / (4 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 4 == 0) ? 1.0 : (i % 4 == 1) ? 2.0 : (i % 4 == 2) ? 3.0 : 4.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 2) % n) / (5 * m + 1); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 0.5 : (i % 3 == 1) ? -0.5 : 1.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 1) % (n + 1)) / (2 * m); \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n                DATA_TYPE POLYBENCH_2D(A, M, N, m, n),\n                DATA_TYPE POLYBENCH_1D(x, N, n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 5 == 0) ? 0.5 : (i % 5 == 1) ? -0.5 : (i % 5 == 2) ? 1.5 : (i % 5 == 3) ? -1.5 : 2.5; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 3) % (n + 2)) / (3 * m + 2); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 5 == 0) ? 1.0 : (i % 5 == 1) ? -1.0 : (i % 5 == 2) ? 0.5 : (i % 5 == 3) ? -0.5 : 2.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 2) % (n + 3)) / (3 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 0.1 : (i % 3 == 1) ? 0.2 : 0.3; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 2) % (n + 1)) / (7 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 3 == 0) ? 2.0 : (i % 3 == 1) ? -2.0 : 1.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j + 1) % (n + 1)) / (4 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 4 == 0) ? 1.0 : (i % 4 == 1) ? 2.0 : (i % 4 == 2) ? 3.0 : 4.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i * j) % (n + 3)) / (2 * m); \n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n                 DATA_TYPE POLYBENCH_1D(x,N,n))\n{\n    int i, j;\n    DATA_TYPE fn;\n    fn = (DATA_TYPE)n;\n\n    for (i = 0; i < n; i++)\n        x[i] = (i % 5 == 0) ? 2.0 : (i % 5 == 1) ? -2.0 : (i % 5 == 2) ? 4.0 : (i % 5 == 3) ? -4.0 : 6.0; \n    for (i = 0; i < m; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = (DATA_TYPE) ((i + j) % (n + 3)) / (5 * m); \n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++)\n    y[i] = 0;\n  for (i = 0; i < _PB_M; i++)\n    {\n      tmp[i] = SCALAR_VAL(0.0);\n      for (j = 0; j < _PB_N; j++)\n\ttmp[i] = tmp[i] + A[i][j] * x[j];\n      for (j = 0; j < _PB_N; j++)\n\ty[j] = y[j] + A[i][j] * tmp[i];\n    }\n"
    },
    "bicg.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int m, int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 1)) / (m + 1);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 1)) / (n + 1);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % (n + 1))/(n + 1);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 2)) / (m + 2);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 2)) / (n + 2);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % (n + 2))/(n + 2);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 3)) / (m + 3);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 3)) / (n + 3);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+4) % (n + 3))/(n + 3);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 5)) / (m + 5);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 5)) / (n + 5);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+7) % (n + 5))/(n + 5);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 5)) / (m + 5);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 5)) / (n + 5);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+6) % (n + 5))/(n + 5);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 10)) / (m + 10);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 10)) / (n + 10);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+11) % (n + 10))/(n + 10);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 15)) / (m + 15);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 15)) / (n + 15);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+13) % (n + 15))/(n + 15);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 5)) / (m + 5);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 5)) / (n + 5);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % (n + 5))/(n + 5);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i * 2 % (m + 1)) / (m + 1);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i * 3 % (n + 1)) / (n + 1);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i + j) % (n + 1)) / (n + 1);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i * i % (m + 10)) / (m + 10);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i * i * i % (n + 10)) / (n + 10);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i * j + i + j) % (n + 10)) / (n + 10);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i * 3 % (m + 20)) / (m + 20);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i * 5 % (n + 20)) / (n + 20);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i + j * 2 + i * j) % (n + 20)) / (n + 20);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 7)) / (m + 7);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 7)) / (n + 7);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+2) % (n + 7))/(n + 7);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 10)) / (m + 10);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 10)) / (n + 10);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+3) % (n + 10))/(n + 10);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 3)) / (m + 3);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 3)) / (n + 3);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+1) % (n + 3))/(n + 3);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i * i % (m + 3)) / (m + 3);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i * i % (n + 3)) / (n + 3);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i * j + i + j) % (n + 3)) / (n + 3);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 10)) / (m + 10);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 10)) / (n + 10);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+5) % (n + 10))/(n + 10);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 50)) / (m + 50);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 50)) / (n + 50);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+21) % (n + 50))/(n + 50);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i * (i + 1) % (m + 5)) / (m + 5);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i * (i + 1) % (n + 5)) / (n + 5);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i + j) * (i + j + 1) % (n + 5)) / (n + 5);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i % (m + 7)) / (m + 7);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i % (n + 7)) / (n + 7);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) (i*(j+11) % (n + 7))/(n + 7);\n  }\n}\n",
            "\nstatic\nvoid init_array (int m, int n,\n                 DATA_TYPE POLYBENCH_2D(A,N,M,n,m),\n                 DATA_TYPE POLYBENCH_1D(r,N,n),\n                 DATA_TYPE POLYBENCH_1D(p,M,m))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    p[i] = (DATA_TYPE)(i * (m - i) % (m + 5)) / (m + 5);\n  for (i = 0; i < n; i++) {\n    r[i] = (DATA_TYPE)(i * (n - i) % (n + 5)) / (n + 5);\n    for (j = 0; j < m; j++)\n      A[i][j] = (DATA_TYPE) ((i + j) * (n - j) % (n + 5)) / (n + 5);\n  }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_M; i++)\n    s[i] = 0;\n  for (i = 0; i < _PB_N; i++)\n    {\n      q[i] = SCALAR_VAL(0.0);\n      for (j = 0; j < _PB_M; j++)\n\t{\n\t  s[j] = s[j] + r[i] * A[i][j];\n\t  q[i] = q[i] + A[i][j] * p[j];\n\t}\n    }\n"
    },
    "doitgen.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i + j + k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i + j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i * i + j * j + k * k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i * i + j * j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i * j + k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i * j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i + j * k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i + j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i * j + j * k + k * i) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i * j + i + j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i + j - k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i - j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i + j * k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i + j + i * j) % np) / np;\n}\n",
            "\nstatic\nvoid init_array(int nr, int nq, int np,\n\t\tDATA_TYPE POLYBENCH_3D(A,NR,NQ,NP,nr,nq,np),\n\t\tDATA_TYPE POLYBENCH_2D(C4,NP,NP,np,np))\n{\n  int i, j, k;\n\n  for (i = 0; i < nr; i++)\n    for (j = 0; j < nq; j++)\n      for (k = 0; k < np; k++)\n\tA[i][j][k] = (DATA_TYPE) ((i * i + j * j - k * k) % np) / np;\n  for (i = 0; i < np; i++)\n    for (j = 0; j < np; j++)\n      C4[i][j] = (DATA_TYPE) ((i * i - j * j) % np) / np;\n}\n"
        ],
        "code": "\n  for (r = 0; r < _PB_NR; r++)\n    for (q = 0; q < _PB_NQ; q++)  {\n      for (p = 0; p < _PB_NP; p++)  {\n\tsum[p] = SCALAR_VAL(0.0);\n\tfor (s = 0; s < _PB_NP; s++)\n\t  sum[p] += A[r][q][s] * C4[s][p];\n      }\n      for (p = 0; p < _PB_NP; p++)\n\tA[r][q][p] = sum[p];\n    }\n"
    },
    "mvt.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) (i % (n/2)) / n;\n      x2[i] = (DATA_TYPE) ((i + 2) % (n/2)) / n;\n      y_1[i] = (DATA_TYPE) ((i + 5) % (n/2)) / n;\n      y_2[i] = (DATA_TYPE) ((i + 6) % (n/2)) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i + j) % (n/2)) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) (i % (n/4)) / n;\n      x2[i] = (DATA_TYPE) ((i + 3) % (n/4)) / n;\n      y_1[i] = (DATA_TYPE) ((i + 7) % (n/4)) / n;\n      y_2[i] = (DATA_TYPE) ((i + 8) % (n/4)) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j + 1) % (n/4)) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 2) % n) / n;\n      x2[i] = (DATA_TYPE) ((i * 3 + 5) % n) / n;\n      y_1[i] = (DATA_TYPE) ((i * 7 + 11) % n) / n;\n      y_2[i] = (DATA_TYPE) ((i * 13 + 17) % n) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i + j * 5) % n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * i) % n) / n;\n      x2[i] = (DATA_TYPE) ((i * i * i + 3) % n) / n;\n      y_1[i] = (DATA_TYPE) ((i * 5 + 7) % n) / n;\n      y_2[i] = (DATA_TYPE) ((i * 11 + 13) % n) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j + 2) % n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 7 + 5) % n) / n;\n      x2[i] = (DATA_TYPE) ((i * 11 + 7) % n) / n;\n      y_1[i] = (DATA_TYPE) ((i * 13 + 11) % n) / n;\n      y_2[i] = (DATA_TYPE) ((i * 17 + 13) % n) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 3 + 5) % n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 11) % n) / n;\n      x2[i] = (DATA_TYPE) ((i * 13 + 7) % n) / n;\n      y_1[i] = (DATA_TYPE) ((i * 17 + 5) % n) / n;\n      y_2[i] = (DATA_TYPE) ((i * 19 + 3) % n) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * 23 + j * 29) % n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 2 + 5) % n) / (2 * n);\n      x2[i] = (DATA_TYPE) ((i * 3 + 7) % n) / (2 * n);\n      y_1[i] = (DATA_TYPE) ((i * 4 + 9) % n) / (2 * n);\n      y_2[i] = (DATA_TYPE) ((i * 5 + 11) % n) / (2 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i + j * 6 + 13) % n) / (2 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 2 + 1) % n) / (2 * n);\n      x2[i] = (DATA_TYPE) ((i * 3 + 2) % n) / (2 * n);\n      y_1[i] = (DATA_TYPE) ((i * 5 + 3) % n) / (2 * n);\n      y_2[i] = (DATA_TYPE) ((i * 7 + 5) % n) / (2 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 2 + 7) % n) / (2 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 11 + 7) % n) / (3 * n);\n      x2[i] = (DATA_TYPE) ((i * 13 + 5) % n) / (3 * n);\n      y_1[i] = (DATA_TYPE) ((i * 17 + 3) % n) / (3 * n);\n      y_2[i] = (DATA_TYPE) ((i * 19 + 2) % n) / (3 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 3 + 11) % n) / (3 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * i + 1) % n) / (3 * n);\n      x2[i] = (DATA_TYPE) ((i * i * 2 + 3) % n) / (3 * n);\n      y_1[i] = (DATA_TYPE) ((i * i * 3 + 5) % n) / (3 * n);\n      y_2[i] = (DATA_TYPE) ((i * i * 4 + 7) % n) / (3 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * i + j * j + 11) % n) / (3 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 5 + 3) % (n + 1)) / (n + 2);\n      x2[i] = (DATA_TYPE) ((i * 7 + 2) % (n + 1)) / (n + 2);\n      y_1[i] = (DATA_TYPE) ((i * 11 + 5) % (n + 1)) / (n + 2);\n      y_2[i] = (DATA_TYPE) ((i * 13 + 7) % (n + 1)) / (n + 2);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 2 + 3) % (n + 1)) / (n + 2);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) (i % (n/8)) / n;\n      x2[i] = (DATA_TYPE) ((i + 1) % (n/8)) / n;\n      y_1[i] = (DATA_TYPE) ((i + 4) % (n/8)) / n;\n      y_2[i] = (DATA_TYPE) ((i + 9) % (n/8)) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j + 2) % (n/8)) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 7 + 11) % n) / (5 * n);\n      x2[i] = (DATA_TYPE) ((i * 13 + 17) % n) / (5 * n);\n      y_1[i] = (DATA_TYPE) ((i * 19 + 23) % n) / (5 * n);\n      y_2[i] = (DATA_TYPE) ((i * 29 + 31) % n) / (5 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 5 + 37) % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 31 + 17) % n) / n;\n      x2[i] = (DATA_TYPE) ((i * 37 + 19) % n) / n;\n      y_1[i] = (DATA_TYPE) ((i * 41 + 23) % n) / n;\n      y_2[i] = (DATA_TYPE) ((i * 43 + 29) % n) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * 47 + j * 53) % n) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 31 + 17) % n) / (3 * n);\n      x2[i] = (DATA_TYPE) ((i * 37 + 23) % n) / (3 * n);\n      y_1[i] = (DATA_TYPE) ((i * 41 + 29) % n) / (3 * n);\n      y_2[i] = (DATA_TYPE) ((i * 43 + 31) % n) / (3 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * 47 + j * 53) % n) / (3 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 59 + 41) % n) / (7 * n);\n      x2[i] = (DATA_TYPE) ((i * 61 + 43) % n) / (7 * n);\n      y_1[i] = (DATA_TYPE) ((i * 67 + 47) % n) / (7 * n);\n      y_2[i] = (DATA_TYPE) ((i * 71 + 53) % n) / (7 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 7 + 73) % n) / (7 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 23 + 29) % n) / (7 * n);\n      x2[i] = (DATA_TYPE) ((i * 31 + 37) % n) / (7 * n);\n      y_1[i] = (DATA_TYPE) ((i * 41 + 43) % n) / (7 * n);\n      y_2[i] = (DATA_TYPE) ((i * 47 + 53) % n) / (7 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 7 + 59) % n) / (7 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 5 + 3) % n) / (5 * n);\n      x2[i] = (DATA_TYPE) ((i * 7 + 2) % n) / (5 * n);\n      y_1[i] = (DATA_TYPE) ((i * 11 + 5) % n) / (5 * n);\n      y_2[i] = (DATA_TYPE) ((i * 13 + 7) % n) / (5 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 7 + 13) % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 37 + 29) % n) / (5 * n);\n      x2[i] = (DATA_TYPE) ((i * 41 + 31) % n) / (5 * n);\n      y_1[i] = (DATA_TYPE) ((i * 43 + 37) % n) / (5 * n);\n      y_2[i] = (DATA_TYPE) ((i * 47 + 53) % n) / (5 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 11 + 59) % n) / (5 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 13 + 17) % n) / (11 * n);\n      x2[i] = (DATA_TYPE) ((i * 19 + 23) % n) / (11 * n);\n      y_1[i] = (DATA_TYPE) ((i * 29 + 31) % n) / (11 * n);\n      y_2[i] = (DATA_TYPE) ((i * 37 + 41) % n) / (11 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 11 + 43) % n) / (11 * n);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 2) % (n/8)) / n;\n      x2[i] = (DATA_TYPE) ((i * 3 + 4) % (n/8)) / n;\n      y_1[i] = (DATA_TYPE) ((i * 5 + 9) % (n/8)) / n;\n      y_2[i] = (DATA_TYPE) ((i * 7 + 10) % (n/8)) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * j + 2) % (n/8)) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 11 + 5) % (n/6)) / n;\n      x2[i] = (DATA_TYPE) ((i * 13 + 7) % (n/6)) / n;\n      y_1[i] = (DATA_TYPE) ((i * 17 + 11) % (n/6)) / n;\n      y_2[i] = (DATA_TYPE) ((i * 19 + 13) % (n/6)) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * j * j + 3) % (n/6)) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 23 + 17) % (n/8)) / n;\n      x2[i] = (DATA_TYPE) ((i * 29 + 23) % (n/8)) / n;\n      y_1[i] = (DATA_TYPE) ((i * 31 + 29) % (n/8)) / n;\n      y_2[i] = (DATA_TYPE) ((i * 37 + 31) % (n/8)) / n;\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * j * j * j + 5) % (n/8)) / n;\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 2 + 1) % (n + 3)) / (n + 4);\n      x2[i] = (DATA_TYPE) ((i * 3 + 2) % (n + 3)) / (n + 4);\n      y_1[i] = (DATA_TYPE) ((i * 5 + 4) % (n + 3)) / (n + 4);\n      y_2[i] = (DATA_TYPE) ((i * 7 + 6) % (n + 3)) / (n + 4);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 4 + 5) % (n + 3)) / (n + 4);\n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_1D(x1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(x2,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_1,N,n),\n\t\tDATA_TYPE POLYBENCH_1D(y_2,N,n),\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      x1[i] = (DATA_TYPE) ((i * 13 + 7) % n) / (11 * n);\n      x2[i] = (DATA_TYPE) ((i * 17 + 11) % n) / (11 * n);\n      y_1[i] = (DATA_TYPE) ((i * 19 + 13) % n) / (11 * n);\n      y_2[i] = (DATA_TYPE) ((i * 23 + 17) % n) / (11 * n);\n      for (j = 0; j < n; j++)\n\tA[i][j] = (DATA_TYPE) ((i * j * 29 + 23) % n) / (11 * n);\n    }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_N; j++)\n      x1[i] = x1[i] + A[i][j] * y_1[j];\n  for (i = 0; i < _PB_N; i++)\n    for (j = 0; j < _PB_N; j++)\n      x2[i] = x2[i] + A[j][i] * y_2[j];\n"
    },
    "cholesky.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1); \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) * 2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) / n; \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) / (2 * n); \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (2 * n); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) / n; \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n) + 0.1; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1 + 0.1 * (i + 1); \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) / n + 0.1; \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 2) / (2.0 * n) + 0.2; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1 + 0.2 * (i + 1); \n    }\n\n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) / n + 0.2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n) + 0.1; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) / (2 * n) + 0.2; \n  }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (2.0 * n); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      if ((i + j) % 2 == 0) {\n        A[i][j] *= 2; \n      } else {\n        A[i][j] /= 2; \n      }\n    }\n    A[i][i] = (DATA_TYPE)(i + 1) * 3; \n  }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n    for (j = i + 1; j < n; j++) {\n      A[i][j] = 0; \n    }\n    A[i][i] = 1; \n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      if ((i + j) % 3 == 0) {\n        A[i][j] *= 3; \n      } else {\n        A[i][j] /= 3; \n      }\n    }\n    A[i][i] = (DATA_TYPE)(i + 1) * 4; \n  }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i + j + 1) / (n + 1);\n        for (j = i + 1; j < n; j++)\n            A[i][j] = 0;\n        A[i][i] = 1;\n    }\n\n    for (i = 0; i < n; i++)\n    {\n        A[i][i] = (DATA_TYPE)(i + 1) / (n + 1);\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE)(i + j + 2) / (2 * n); \n    for (j = i + 1; j < n; j++) {\n      A[i][j] = 0; \n    }\n    A[i][i] = 1; \n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      if ((i + j) % 2 == 0) {\n        A[i][j] *= 2; \n      } else {\n        A[i][j] /= 2; \n      }\n    }\n    A[i][i] = (DATA_TYPE)(i + 1) * 3; \n  }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE)(i * j + 1) / (n * n); \n    for (j = i + 1; j < n; j++) {\n      A[i][j] = 0; \n    }\n    A[i][i] = 1; \n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      if ((i + j) % 3 == 0) {\n        A[i][j] += (DATA_TYPE)(i + j) / n; \n      } else {\n        A[i][j] -= (DATA_TYPE)(i + j) / n; \n      }\n    }\n    A[i][i] = (DATA_TYPE)(i + 1) * 2 + 1; \n  }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n) + 0.2; \n        for (j = i + 1; j < n; j++) {\n            A[i][j] = 0; \n        }\n        A[i][i] = 1 + 0.2 * (i + 1); \n    }\n\n    for (i = 0; i < n; i++) {\n        A[i][i] = (DATA_TYPE)(i + 1) / n + 0.2; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i * j + 2) / (n * n + 1);\n        for (j = i + 1; j < n; j++)\n            A[i][j] = 0;\n        A[i][i] = 1;\n    }\n\n    for (i = 0; i < n; i++)\n    {\n        A[i][i] = (DATA_TYPE)(i + 2) / (n + 2);\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i + j + 1) / (2 * n);\n        for (j = i + 1; j < n; j++)\n            A[i][j] = 0;\n        A[i][i] = 1;\n    }\n\n    for (i = 0; i < n; i++)\n    {\n        A[i][i] = (DATA_TYPE)(i + 1) / (4 * n);\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n) + 0.5; \n        for (j = i + 1; j < n; j++)\n            A[i][j] = 0;\n        A[i][i] = 1;\n    }\n\n    for (i = 0; i < n; i++)\n    {\n        A[i][i] = (DATA_TYPE)(i + 1) / (2 * n) + 0.8; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i + j + 2) / (3.0 * n) + 0.3; \n        for (j = i + 1; j < n; j++) {\n            A[i][j] = 0; \n        }\n        A[i][i] = 1 + 0.3 * (i + 1); \n    }\n\n    for (i = 0; i < n; i++) {\n        A[i][i] = (DATA_TYPE)(i + 1) / n + 0.3; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n) + 0.25; \n        for (j = i + 1; j < n; j++)\n            A[i][j] = 0;\n        A[i][i] = 1;\n    }\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < i; j++)\n        {\n            if ((i + j) % 2 == 0)\n                A[i][j] *= 2;\n            else\n                A[i][j] /= 2;\n        }\n        A[i][i] = (DATA_TYPE)(i + 1) / (3 * n) + 0.6; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i + j + 2) / (2 * n) + 0.3; \n        for (j = i + 1; j < n; j++)\n            A[i][j] = 0;\n        A[i][i] = 1;\n    }\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < i; j++)\n        {\n            if ((i + j) % 3 == 0)\n                A[i][j] *= 1.5;\n            else\n                A[i][j] /= 1.5;\n        }\n        A[i][i] = (DATA_TYPE)(i + 1) / (4 * n) + 0.4; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i + j + 1) / (n * n) + 0.5; \n        for (j = i + 1; j < n; j++) {\n            A[i][j] = 0; \n        }\n        A[i][i] = 1 + 0.5 * (i + 1); \n    }\n\n    for (i = 0; i < n; i++) {\n        A[i][i] = (DATA_TYPE)(i + 1) / n + 0.5; \n    }\n}\n",
            "\nstatic\nvoid init_array(int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1) * 0.5; \n  }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j <= i; j++)\n            A[i][j] = (DATA_TYPE)(i * j + 1) / (n * n) + 0.1; \n        for (j = i + 1; j < n; j++) {\n            A[i][j] = 0; \n        }\n        A[i][i] = 1 + 0.1 * (i + 1); \n    }\n\n    for (i = 0; i < n; i++) {\n        A[i][i] = (DATA_TYPE)(i + 1) / (2 * n) + 0.1; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE)(i + j + 2) / (n + 1); \n    for (j = i + 1; j < n; j++) {\n      A[i][j] = 0; \n    }\n    A[i][i] = 1; \n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      if ((i + j) % 2 == 0) {\n        A[i][j] += (DATA_TYPE)(i * j) / n; \n      } else {\n        A[i][j] -= (DATA_TYPE)(i * j) / n; \n      }\n    }\n    A[i][i] = (DATA_TYPE)(i + 1) * 3 + 2; \n  }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n  {\n    for (j = 0; j <= i; j++)\n      A[i][j] = (DATA_TYPE)(i * j + 1) / (n + 1); \n    for (j = i + 1; j < n; j++) {\n      A[i][j] = 0; \n    }\n    A[i][i] = 1; \n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      if ((i + j) % 3 == 0) {\n        A[i][j] *= 3; \n      } else {\n        A[i][j] /= 3; \n      }\n    }\n    A[i][i] = (DATA_TYPE)(i + 1) * 2; \n  }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++) {\n     //j<i\n     for (j = 0; j < i; j++) {\n        for (k = 0; k < j; k++) {\n           A[i][j] -= A[i][k] * A[j][k];\n        }\n        A[i][j] /= A[j][j];\n     }\n     // i==j case\n     for (k = 0; k < i; k++) {\n        A[i][i] -= A[i][k] * A[i][k];\n     }\n     A[i][i] = SQRT_FUN(A[i][i]);\n  }\n"
    },
    "durbin.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      \n      \n      if (i % 3 == 0)\n        r[i] = i * 0.5; \n      else if (i % 3 == 1)\n        r[i] = -i * 0.5; \n      else\n        r[i] = 0.0; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 2 == 0) ? i * 0.1 : -i * 0.1;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.2 : (i % 5 == 1) ? -i * 0.2 : (i % 5 == 2) ? i * 0.1 : (i % 5 == 3) ? -i * 0.1 : 0.0;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 2 == 0) ? i * 0.5 : -i * 0.5;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 3 == 0) ? i * 0.75 : (i % 3 == 1) ? -i * 0.75 : i * 0.25;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.1 : (i % 5 == 1) ? -i * 0.2 : (i % 5 == 2) ? i * 0.3 : (i % 5 == 3) ? -i * 0.4 : i * 0.5;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 3 == 0) ? i * 0.1 : (i % 3 == 1) ? -i * 0.1 : i * 0.2;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 2 == 0) ? i * 0.05 : -i * 0.05;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 3 == 0) ? i * 0.1 : (i % 3 == 1) ? -i * 0.1 : 0.0;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 3 == 0) ? i * 0.05 : (i % 3 == 1) ? -i * 0.15 : (i % 3 == 2) ? i * 0.25 : 0.0;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 7 == 0) ? i * 0.01 : (i % 7 == 1) ? -i * 0.02 : (i % 7 == 2) ? i * 0.03 : (i % 7 == 3) ? -i * 0.04 : (i % 7 == 4) ? i * 0.05 : (i % 7 == 5) ? -i * 0.06 : i * 0.07;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.5 : (i % 5 == 1) ? -i * 0.5 : (i % 5 == 2) ? i * 0.25 : (i % 5 == 3) ? -i * 0.25 : i * 0.1;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 2 == 0) ? i * 0.25 : -i * 0.25;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.75 : (i % 5 == 1) ? -i * 0.75 : (i % 5 == 2) ? i * 0.35 : (i % 5 == 3) ? -i * 0.35 : i * 0.55;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 7 == 0) ? i * 0.3 : (i % 7 == 1) ? -i * 0.3 : (i % 7 == 2) ? i * 0.2 : (i % 7 == 3) ? -i * 0.2 : (i % 7 == 4) ? i * 0.1 : (i % 7 == 5) ? -i * 0.1 : 0.0;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 7 == 0) ? i * 0.75 : (i % 7 == 1) ? -i * 0.75 : (i % 7 == 2) ? i * 0.375 : (i % 7 == 3) ? -i * 0.375 : (i % 7 == 4) ? i * 0.1875 : (i % 7 == 5) ? -i * 0.1875 : i * 0.09375;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.5 : (i % 5 == 1) ? -i * 0.5 : (i % 5 == 2) ? i * 0.25 : (i % 5 == 3) ? -i * 0.25 : i * 0.125;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 3 == 0) ? i * 0.1 : (i % 3 == 1) ? -i * 0.1 : (i % 3 == 2) ? i * 0.05 : 0.0;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 7 == 0) ? i * 0.1 : (i % 7 == 1) ? -i * 0.2 : (i % 7 == 2) ? i * 0.3 : (i % 7 == 3) ? -i * 0.4 : (i % 7 == 4) ? i * 0.5 : (i % 7 == 5) ? -i * 0.6 : i * 0.7;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 3 == 0) ? i * 0.07 : (i % 3 == 1) ? -i * 0.07 : i * 0.03;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 2 == 0) ? i * 0.12 : -i * 0.08;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 7 == 0) ? i * 0.65 : (i % 7 == 1) ? -i * 0.65 : (i % 7 == 2) ? i * 0.45 : (i % 7 == 3) ? -i * 0.45 : (i % 7 == 4) ? i * 0.85 : (i % 7 == 5) ? -i * 0.85 : i * 0.15;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.25 : (i % 5 == 1) ? -i * 0.25 : (i % 5 == 2) ? i * 0.5 : (i % 5 == 3) ? -i * 0.5 : i * 0.75;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_1D(r,N,n))\n{\n  int i;\n\n  for (i = 0; i < n; i++)\n    {\n      r[i] = (i % 5 == 0) ? i * 0.15 : (i % 5 == 1) ? -i * 0.15 : (i % 5 == 2) ? i * 0.05 : (i % 5 == 3) ? -i * 0.05 : i * 0.10;\n    }\n}\n"
        ],
        "code": "\n y[0] = -r[0];\n beta = SCALAR_VAL(1.0);\n alpha = -r[0];\n\n for (k = 1; k < _PB_N; k++) {\n   beta = (1-alpha*alpha)*beta;\n   sum = SCALAR_VAL(0.0);\n   for (i=0; i<k; i++) {\n      sum += r[k-i-1]*y[i];\n   }\n   alpha = - (r[k] + sum)/beta;\n\n   for (i=0; i<k; i++) {\n      z[i] = y[i] + alpha*y[k-i-1];\n   }\n   for (i=0; i<k; i++) {\n     y[i] = z[i];\n   }\n   y[k] = alpha;\n }\n"
    },
    "gramschmidt.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  \n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      \n      if (i == j)\n        A[i][j] = (DATA_TYPE)(rand() % 100) + 1.0; \n      else if (i < j)\n        A[i][j] = (DATA_TYPE)(rand() % 50) / 50.0; \n      else\n        A[i][j] = (DATA_TYPE)(rand() % 1000) / 100.0; \n\n      Q[i][j] = 0.0; \n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0; \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  \n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      \n      if (i == j)\n        A[i][j] = (DATA_TYPE)(rand() % 100) + 100.0; \n      else\n        A[i][j] = (DATA_TYPE)(rand() % 100) / 100.0; \n\n      Q[i][j] = 0.0; \n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0; \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  \n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      \n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 100.0;\n      if (i == j) {\n        \n        A[i][j] += 10.0;\n      }\n      \n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      \n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      \n      if (i == j)\n        A[i][j] = (DATA_TYPE)(rand() % 100) + 50.0; \n      else if (i < j)\n        A[i][j] = (DATA_TYPE)(rand() % 10) / 100.0; \n      else\n        A[i][j] = (DATA_TYPE)(rand() % 1000) / 100.0; \n\n      Q[i][j] = 0.0; \n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0; \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 100.0;\n      if (i == j) {\n        A[i][j] += 20.0; \n      } else if (i > j) {\n        A[i][j] *= 0.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 200) - 100.0; \n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 50.0;\n      if (i == j) {\n        A[i][j] += 30.0; \n      } else if (i < j) {\n        A[i][j] *= 1.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 150.0; \n      if (i == j) {\n        A[i][j] += 15.0; \n      } else if (i < j) {\n        A[i][j] *= 1.5; \n      } else {\n        A[i][j] *= 0.75; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      \n      A[i][j] = (DATA_TYPE)((i + j) % 2 == 0 ? (rand() % 100) + 1.0 : -(rand() % 100) - 1.0);\n      Q[i][j] = 0.0; \n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0; \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 100) / 10.0; \n      if (i == j) {\n        A[i][j] += 20.0; \n      } else if (i < j) {\n        A[i][j] *= 2.0; \n      } else {\n        A[i][j] *= 0.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  \n  srand(1);\n\n  \n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)((rand() / (double)RAND_MAX) * 2.0 - 1.0);\n    }\n\n  \n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      R[i][j] = 0.0;\n    }\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 100.0; \n      if (i == j) {\n        A[i][j] += 10.0; \n      } else if (i < j) {\n        A[i][j] *= 1.25; \n      } else {\n        A[i][j] *= 0.65; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 200) - 100.0; \n      Q[i][j] = 0.0; \n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0; \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(i == j ? 1.0 : (rand() % 10) / 10.0); \n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(2); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 100.0; \n      if (i == j) {\n        A[i][j] += 10.0; \n      } else if (i > j) {\n        A[i][j] *= 0.5; \n      }\n      Q[i][j] = 0.0; \n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0; \n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(2); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 200.0; \n      if (i == j) {\n        A[i][j] += 20.0; \n      } else if (i > j) {\n        A[i][j] *= 0.85; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(2); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 120.0; \n      if (i == j) {\n        A[i][j] += 20.0; \n      } else if (i > j) {\n        A[i][j] *= 0.5; \n      } else {\n        A[i][j] *= 2.0; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(2); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 50.0; \n      if (i == j) {\n        A[i][j] += 30.0; \n      } else if (i < j) {\n        A[i][j] *= 1.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(3); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 150.0; \n      if (i == j) {\n        A[i][j] += 30.0; \n      } else if (i > j) {\n        A[i][j] *= 0.75; \n      } else {\n        A[i][j] *= 1.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 2000 - 1000) / 100.0; \n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(2); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 100.0; \n      if (i == j) {\n        A[i][j] += 10.0; \n      } else if (i > j) {\n        A[i][j] *= 0.5; \n      } else {\n        A[i][j] *= 1.25; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 100) / 100.0; \n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 100.0; \n      if (i == j) {\n        A[i][j] *= 2.0; \n      } else if (i > j) {\n        A[i][j] /= 2.0; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(5); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 300.0; \n      if (i == j) {\n        A[i][j] += 20.0; \n      } else if (i > j) {\n        A[i][j] *= 0.6; \n      } else {\n        A[i][j] *= 1.7; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(1);\n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 500) / 50.0; \n      if (i == j) {\n        A[i][j] += 10.0; \n      } else if (i < j) {\n        A[i][j] *= 1.5; \n      } else {\n        A[i][j] /= 1.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n",
            "\nstatic\nvoid init_array(int m, int n,\n\t\tDATA_TYPE POLYBENCH_2D(A,M,N,m,n),\n\t\tDATA_TYPE POLYBENCH_2D(R,N,N,n,n),\n\t\tDATA_TYPE POLYBENCH_2D(Q,M,N,m,n))\n{\n  int i, j;\n\n  srand(2); \n\n  for (i = 0; i < m; i++)\n    for (j = 0; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 1000) / 200.0; \n      if (i == j) {\n        A[i][j] += 20.0; \n      } else if (i < j) {\n        A[i][j] *= 0.75; \n      } else {\n        A[i][j] *= 1.5; \n      }\n      Q[i][j] = 0.0;\n    }\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      R[i][j] = 0.0;\n}\n"
        ],
        "code": "\n  for (k = 0; k < _PB_N; k++)\n    {\n      nrm = SCALAR_VAL(0.0);\n      for (i = 0; i < _PB_M; i++)\n        nrm += A[i][k] * A[i][k];\n      R[k][k] = SQRT_FUN(nrm);\n      for (i = 0; i < _PB_M; i++)\n        Q[i][k] = A[i][k] / R[k][k];\n      for (j = k + 1; j < _PB_N; j++)\n\t{\n\t  R[k][j] = SCALAR_VAL(0.0);\n\t  for (i = 0; i < _PB_M; i++)\n\t    R[k][j] += Q[i][k] * A[i][j];\n\t  for (i = 0; i < _PB_M; i++)\n\t    A[i][j] = A[i][j] - Q[i][k] * R[k][j];\n\t}\n    }\n"
    },
    "lu.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        \n        A[i][j] = (DATA_TYPE)(i + j + 1); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n    }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = (DATA_TYPE)(i + 1); \n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i == j ? 1 : (i + j + 1) % n); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 10) / 10.0;\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 5) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i * n + j + 1) / (n * n); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 10) / 1000.0; \n      }\n    }\n  }\n\n  \n  for (i = 0; i < n; i++) {\n    DATA_TYPE sum = 0.0;\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        sum += fabs(A[i][j]);\n      }\n    }\n    A[i][i] = sum + 1.0; \n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (2.0 * n); \n    }\n\n  \n  for (i = 1; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 5) / 10.0;\n    }\n  }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = 1.0 + (DATA_TYPE)i / n;\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (2.0 * n); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n      A[i][i] = 1; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 5) / 50.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 2) / (DATA_TYPE)(n + 1); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 5) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i * n + j) / (n * n); \n    }\n\n  \n  for (i = 1; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 10) / 10.0;\n    }\n  }\n\n  \n  for (i = 0; i < n; i++) {\n    A[i][i] = 1.0 + (DATA_TYPE)i / n + 0.5; \n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i * j + 1) / (DATA_TYPE)(n * n + 1); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n      A[i][i] = 1 + (DATA_TYPE)(i) / (DATA_TYPE)(n); \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 10) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (DATA_TYPE)(n * 2); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 3) / 50.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (1.0 * n); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n      A[i][i] = 1 + (DATA_TYPE)(rand() % 10) / 100.0; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 3) / 30.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (2.0 * n); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n      A[i][i] = (DATA_TYPE)(i + 1) / n; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (n * 1.0); \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0; \n      }\n      A[i][i] = 1.0; \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 10) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i + j) / (2.0 * n); \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j <= i; j++) {\n      if (i == j) {\n        A[i][j] = 1.0 + (DATA_TYPE)i / n; \n      } else {\n        A[i][j] = (DATA_TYPE)(i * j) / (n * n); \n      }\n    }\n    for (j = i + 1; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(i * j) / (n * n); \n    }\n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      A[i][j] += (DATA_TYPE)(rand() % 3) / 1000.0; \n    }\n  }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n)) {\n    int i, j;\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i == j) {\n                A[i][j] = 1.0 + (DATA_TYPE)i / n; \n            } else {\n                A[i][j] = (DATA_TYPE)(i * j) / (n * n); \n            }\n        }\n    }\n\n    \n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            A[i][j] += (DATA_TYPE)(rand() % 5) / 1000.0;\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (n * 1.0) + 0.1; \n      for (j = i+1; j < n; j++) {\n        A[i][j] = 0.05 * (DATA_TYPE)(i + j); \n      }\n      A[i][i] = 1.5; \n    }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 5) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i + j) / (n + n); \n    }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < i; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 5) / 5.0;\n    }\n    A[i][i] = 1.0 + (DATA_TYPE)i / n; \n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      A[i][j] = (DATA_TYPE)(rand() % 10) / 10.0;\n    }\n  }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n)) {\n    int i, j;\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i >= j) {\n                A[i][j] = (DATA_TYPE)(i + j + 2) / (DATA_TYPE)(n + 1); \n            } else {\n                A[i][j] = (DATA_TYPE)(i * j + 1) / (DATA_TYPE)(n * n); \n            }\n        }\n    }\n\n    \n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            A[i][j] += (DATA_TYPE)(rand() % 3) / 10000.0;\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 2) / (DATA_TYPE)(n + 1); \n    }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        A[i][j] = 1.0 + (DATA_TYPE)(i) / (DATA_TYPE)(n); \n      } else {\n        A[i][j] *= (DATA_TYPE)(rand() % 5 + 1) / 10.0; \n      }\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i > j) {\n        A[i][j] += (DATA_TYPE)(rand() % 3 + 1) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n)) {\n    int i, j;\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i == j) {\n                A[i][j] = 1.0; \n            } else if (i > j) {\n                A[i][j] = (DATA_TYPE)(i - j) / (DATA_TYPE)(n); \n            } else {\n                A[i][j] = (DATA_TYPE)(j - i) / (DATA_TYPE)(n); \n            }\n        }\n    }\n\n    \n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            A[i][j] += (DATA_TYPE)(rand() % 5) / 1000.0;\n        }\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i == j ? 1 : (i + j + 1) % 10) / (n + 1); \n    }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 3) / 100.0; \n      }\n    }\n  }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n)) {\n    int i, j;\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i == j) {\n                A[i][j] = 2.0 * (DATA_TYPE)i / n + 1.0; \n            } else {\n                A[i][j] = (DATA_TYPE)(i + j) / (n * n) + 0.5; \n            }\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            A[i][j] += (DATA_TYPE)(rand() % 3) / 500.0;\n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n)) {\n    int i, j;\n\n    \n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i == j) {\n                A[i][j] = 2.0 * (i + 1); \n            } else if (i > j) {\n                A[i][j] = (DATA_TYPE)(i - j) / (DATA_TYPE)(n * 2); \n            } else {\n                A[i][j] = (DATA_TYPE)(j - i) / (DATA_TYPE)(n * 2); \n            }\n        }\n    }\n\n    \n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            A[i][j] += (DATA_TYPE)(rand() % 3) / 1000.0;\n        }\n    }\n\n    \n    for (i = 0; i < n; i++) {\n        A[i][i] += 0.5; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j < n; j++)\n        A[i][j] = (DATA_TYPE)(i + j + 1) / (2.0 * n); \n    }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        A[i][j] += (DATA_TYPE)(rand() % 5) / 500.0; \n      }\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    DATA_TYPE sum = 0.0;\n    for (j = 0; j < n; j++) {\n      if (i != j) {\n        sum += fabs(A[i][j]);\n      }\n    }\n    A[i][i] = sum + 2.0; \n  }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++) {\n    for (j = 0; j <i; j++) {\n       for (k = 0; k < j; k++) {\n          A[i][j] -= A[i][k] * A[k][j];\n       }\n        A[i][j] /= A[j][j];\n    }\n   for (j = i; j < _PB_N; j++) {\n       for (k = 0; k < i; k++) {\n          A[i][j] -= A[i][k] * A[k][j];\n       }\n    }\n  }\n"
    },
    "ludcmp.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i+1)/fn + 2; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * n + j) / (n * n) + 1; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1 + i / fn; \n    }\n\n  \n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 1.0 : (i % 3 == 1) ? 2.0 : 3.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (2.0 * n) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1 + (i % 2); \n    }\n\n  \n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.01;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 2 == 0) ? 1.5 : 2.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j) / (fn * fn) + 1.0; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1 + (i % 3); \n    }\n\n  \n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.02 - 0.01; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 4 == 0) ? 0.5 : (i % 4 == 1) ? 1.5 : (i % 4 == 2) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j + 1) / (fn * fn) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 4); \n    }\n\n  \n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.03 - 0.015; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 4 == 0) ? 0.5 : (i % 4 == 1) ? 1.5 : (i % 4 == 2) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (3.0 * n) + 0.75; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 3); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.02;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 4 == 0) ? 0.5 : (i % 4 == 1) ? 1.5 : (i % 4 == 2) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j) / (n * n) + 1.0; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 3); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.02;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 0.75 : (i % 3 == 1) ? 1.75 : 2.75; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j + 2) / (fn * fn) + 0.75; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 3 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.04 - 0.02; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 2 == 0) ? 1.0 : 2.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j) / (2.0 * n) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1 + (i % 4); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.01; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 3.0 : (i % 3 == 1) ? 4.0 : 5.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (fn * fn) + 2.0; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 4); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.03 - 0.015; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 3.0 : (i % 3 == 1) ? 4.0 : 5.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (fn) + 2.0; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.03 - 0.015; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 5 == 0) ? 1.0 : (i % 5 == 1) ? 2.0 : (i % 5 == 2) ? 3.0 : (i % 5 == 3) ? 4.0 : 5.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (2.0 * fn) + 1.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 3 + (i % 4); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.04 - 0.02; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 2 == 0) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j) / (fn * fn) + 1.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1.5 + (i % 3); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.05 - 0.025; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 1.5 : (i % 3 == 1) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (fn + 1) + 2.0; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2.0 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.03 - 0.015; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 4 == 0) ? 1.25 : (i % 4 == 1) ? 2.25 : (i % 4 == 2) ? 3.25 : 4.25; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 3) / (fn * fn) + 1.25; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 7); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.06 - 0.03; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 4 == 0) ? 0.5 : (i % 4 == 1) ? 1.5 : (i % 4 == 2) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (fn * 2) + 0.25; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 3); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.03 - 0.015; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 2 == 0) ? 1.0 : -1.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (2 * n) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1 + (i % 4) * 0.5; \n    }\n\n  \n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.01;\n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 5 == 0) ? 0.75 : (i % 5 == 1) ? 1.75 : (i % 5 == 2) ? 2.75 : (i % 5 == 3) ? 3.75 : 4.75; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j + 2) / (fn * fn) + 1.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 3 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.04 - 0.02; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 0.5 : (i % 3 == 1) ? 1.5 : 2.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 2) / (fn * fn) + 0.75; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1.5 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.04 - 0.02; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 5 == 0) ? 1.0 : (i % 5 == 1) ? 2.0 : (i % 5 == 2) ? 3.0 : (i % 5 == 3) ? 4.0 : 5.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 2) / (fn * fn) + 0.75; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 3 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.04 - 0.02; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 2 == 0) ? 2.5 : 3.5; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (fn * fn) + 1.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1.5 + (i % 3); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.05 - 0.025; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 1.0 : (i % 3 == 1) ? 2.0 : 3.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (fn * fn) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 1.0 + (i % 4); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.1 - 0.05; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 5 == 0) ? 0.25 : (i % 5 == 1) ? 0.75 : (i % 5 == 2) ? 1.25 : (i % 5 == 3) ? 1.75 : 2.25; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (fn * fn) + 0.75; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 3.0 + (i % 5); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.05 - 0.025; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 2 == 0) ? 1.25 : 2.25; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j + 1) / (fn * fn) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 4); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.06 - 0.03; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 4 == 0) ? 1.25 : (i % 4 == 1) ? 2.25 : (i % 4 == 2) ? 3.25 : 4.25; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i * j + 3) / (fn * fn) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2 + (i % 7); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.03 - 0.015; \n    }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_1D(b,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(x,N,n),\n\t\t DATA_TYPE POLYBENCH_1D(y,N,n))\n{\n  int i, j;\n  DATA_TYPE fn = (DATA_TYPE)n;\n\n  for (i = 0; i < n; i++)\n    {\n      x[i] = 0;\n      y[i] = 0;\n      b[i] = (i % 3 == 0) ? 1.0 : (i % 3 == 1) ? 2.0 : 3.0; \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] = (DATA_TYPE)(i + j) / (fn * 2) + 0.5; \n      for (j = i+1; j < n; j++) {\n\tA[i][j] = 0;\n      }\n      A[i][i] = 2.0 + (i % 4); \n    }\n\n  for (i = 0; i < n; i++)\n    {\n      for (j = 0; j <= i; j++)\n\tA[i][j] += ((DATA_TYPE)rand() / (DATA_TYPE)RAND_MAX) * 0.1 - 0.05; \n    }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++) {\n    for (j = 0; j <i; j++) {\n       w = A[i][j];\n       for (k = 0; k < j; k++) {\n          w -= A[i][k] * A[k][j];\n       }\n        A[i][j] = w / A[j][j];\n    }\n   for (j = i; j < _PB_N; j++) {\n       w = A[i][j];\n       for (k = 0; k < i; k++) {\n          w -= A[i][k] * A[k][j];\n       }\n       A[i][j] = w;\n    }\n  }\n\n  for (i = 0; i < _PB_N; i++) {\n     w = b[i];\n     for (j = 0; j < i; j++)\n        w -= A[i][j] * y[j];\n     y[i] = w;\n  }\n\n   for (i = _PB_N-1; i >=0; i--) {\n     w = y[i];\n     for (j = i+1; j < _PB_N; j++)\n        w -= A[i][j] * x[j];\n     x[i] = w / A[i][i];\n  }\n"
    },
    "trisolv.check.c": {
        "init_func": [
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i + 1) / n; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.0 : (i + 1) / (j + 1.0)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 2 == 0 ? 1.0 : -1.0); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i + j + 1) / (n + 1); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 5) + 1; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + 1) / (j + 1.0) + 0.5); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3) * 0.1 + 0.5; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.5 : (i + 2) / (j + 2.0) * 0.5 + 0.1); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3) + 2; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 3.0 : (i + 2) / (j + 2.0) + 1.0); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 7) + 3; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 4.0 : (i + 3) / (j + 3.0) + 1.5); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 0.5 : (i % 3 == 1 ? -0.5 : 1.0)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.0 : (i + j + 2) / (2.0 * n + 2)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 4 == 0 ? 2.0 : (i % 4 == 1 ? -2.0 : (i % 4 == 2 ? 1.0 : -1.0))); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + j + 3) / (3.0 * n + 3)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 5) * 2.0 + 1.0; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + 2) / (j + 2.0) + 0.5); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 2 == 0 ? 1.0 : -1.0); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + j + 1) / (2.0 * n)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 0.5 : (i % 3 == 1 ? -0.5 : 1.0)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i + j + 2) / (2.0 * n); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 5) + 1; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.5 : (i + 1) / (j + 1.0) + 0.5); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 5 == 0 ? 3.0 : (i % 5 == 1 ? -3.0 : (i % 5 == 2 ? 2.0 : (i % 5 == 3 ? -2.0 : 1.0)))); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 3.0 : (i + j + 4) / (4.0 * n + 4) * 0.75 + 0.25); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 2.0 : (i % 3 == 1 ? -1.0 : 0.0)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.0 : (i + j + 2.0) / (n + 2.0)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 0.5 : (i % 3 == 1 ? -0.5 : 1.0)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.0 : (i * j + 1) / (n * n + 1.0)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 5) * 0.2 + 1.0; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + 1) / (j + 1.0) * 0.7 + 0.3); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 2.0 : (i % 3 == 1 ? -2.0 : 0.0)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.0 : (i + j + 2.0) / (n * 2.0)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 3.0 : (i % 3 == 1 ? -3.0 : 0.0)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.0 : (i + j + 2) / (2.0 * n + 2)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 2 == 0 ? 2.0 : -2.0); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + j + 1) / (2.0 * n + 1)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 7) * 0.1 + 0.5; \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 1.5 : (i * j + 1) / (2.0 * n + 1) * 0.8 + 0.2); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 3 == 0 ? 1.5 : (i % 3 == 1 ? -1.5 : 0.5)); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 3.0 : (i * j + 2) / (2.0 * n + 2)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 4 == 0 ? 2.0 : (i % 4 == 1 ? -2.0 : (i % 4 == 2 ? 1.0 : -1.0))); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i * j + 3) / (3.0 * n + 3)); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 7 == 0 ? 1.5 : (i % 7 == 1 ? -1.5 : (i % 7 == 2 ? 0.5 : (i % 7 == 3 ? -0.5 : (i % 7 == 4 ? 2.5 : (i % 7 == 5 ? -2.5 : 3.5)))))); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + j + 1.0) / (n + 1.0) * 0.6 + 0.4); \n        }\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_2D(L, N, N, n, n),\n                       DATA_TYPE POLYBENCH_1D(x, N, n),\n                       DATA_TYPE POLYBENCH_1D(b, N, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        x[i] = 0; \n        b[i] = (DATA_TYPE)(i % 2 == 0 ? 1.0 : -1.0); \n        for (j = 0; j <= i; j++)\n        {\n            L[i][j] = (DATA_TYPE)(i == j ? 2.0 : (i + j + 1.0) / (2.0 * n + 1.0)); \n        }\n    }\n}\n"
        ],
        "code": "\n  for (i = 0; i < _PB_N; i++)\n    {\n      x[i] = b[i];\n      for (j = 0; j <i; j++)\n        x[i] -= L[i][j] * x[j];\n      x[i] = x[i] / L[i][i];\n    }\n"
    },
    "deriche.check.c": {
        "init_func": [
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 0.5; \n\n    \n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((733*i + 563*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 0.75; \n\n    \n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((123*i + 456*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 0.25; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((345*i + 678*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 1.0; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((345*i + 678*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 2.0; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((123*i + 456*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 0.5; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((789*i + 123*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 0.5; \n\n    \n    \n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((123*i + 456*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 1.5; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((345*i + 678*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 2.0; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((789*i + 123*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 2.5; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((789*i + 1011*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 1.5; \n\n    \n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((521*i + 887*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 0.75; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((123*i + 456*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 1.5; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((1234*i + 5678*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 2.0; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((7890*i + 1234*j) % 65536) / 65535.0f;\n}\n",
            "\nstatic void init_array(int w, int h, DATA_TYPE* alpha,\n                       DATA_TYPE POLYBENCH_2D(imgIn, W, H, w, h),\n                       DATA_TYPE POLYBENCH_2D(imgOut, W, H, w, h))\n{\n    int i, j;\n\n    *alpha = 3.0; \n\n    for (i = 0; i < w; i++)\n        for (j = 0; j < h; j++)\n            imgIn[i][j] = (DATA_TYPE) ((1234*i + 567*j) % 65536) / 65535.0f;\n}\n"
        ],
        "code": "\n   k = (SCALAR_VAL(1.0)-EXP_FUN(-alpha))*(SCALAR_VAL(1.0)-EXP_FUN(-alpha))/(SCALAR_VAL(1.0)+SCALAR_VAL(2.0)*alpha*EXP_FUN(-alpha)-EXP_FUN(SCALAR_VAL(2.0)*alpha));\n   a1 = a5 = k;\n   a2 = a6 = k*EXP_FUN(-alpha)*(alpha-SCALAR_VAL(1.0));\n   a3 = a7 = k*EXP_FUN(-alpha)*(alpha+SCALAR_VAL(1.0));\n   a4 = a8 = -k*EXP_FUN(SCALAR_VAL(-2.0)*alpha);\n   b1 =  POW_FUN(SCALAR_VAL(2.0),-alpha);\n   b2 = -EXP_FUN(SCALAR_VAL(-2.0)*alpha);\n   c1 = c2 = 1;\n\n   for (i=0; i<_PB_W; i++) {\n        ym1 = SCALAR_VAL(0.0);\n        ym2 = SCALAR_VAL(0.0);\n        xm1 = SCALAR_VAL(0.0);\n        for (j=0; j<_PB_H; j++) {\n            y1[i][j] = a1*imgIn[i][j] + a2*xm1 + b1*ym1 + b2*ym2;\n            xm1 = imgIn[i][j];\n            ym2 = ym1;\n            ym1 = y1[i][j];\n        }\n    }\n\n    for (i=0; i<_PB_W; i++) {\n        yp1 = SCALAR_VAL(0.0);\n        yp2 = SCALAR_VAL(0.0);\n        xp1 = SCALAR_VAL(0.0);\n        xp2 = SCALAR_VAL(0.0);\n        for (j=_PB_H-1; j>=0; j--) {\n            y2[i][j] = a3*xp1 + a4*xp2 + b1*yp1 + b2*yp2;\n            xp2 = xp1;\n            xp1 = imgIn[i][j];\n            yp2 = yp1;\n            yp1 = y2[i][j];\n        }\n    }\n\n    for (i=0; i<_PB_W; i++)\n        for (j=0; j<_PB_H; j++) {\n            imgOut[i][j] = c1 * (y1[i][j] + y2[i][j]);\n        }\n\n    for (j=0; j<_PB_H; j++) {\n        tm1 = SCALAR_VAL(0.0);\n        ym1 = SCALAR_VAL(0.0);\n        ym2 = SCALAR_VAL(0.0);\n        for (i=0; i<_PB_W; i++) {\n            y1[i][j] = a5*imgOut[i][j] + a6*tm1 + b1*ym1 + b2*ym2;\n            tm1 = imgOut[i][j];\n            ym2 = ym1;\n            ym1 = y1 [i][j];\n        }\n    }\n\n\n    for (j=0; j<_PB_H; j++) {\n        tp1 = SCALAR_VAL(0.0);\n        tp2 = SCALAR_VAL(0.0);\n        yp1 = SCALAR_VAL(0.0);\n        yp2 = SCALAR_VAL(0.0);\n        for (i=_PB_W-1; i>=0; i--) {\n            y2[i][j] = a7*tp1 + a8*tp2 + b1*yp1 + b2*yp2;\n            tp2 = tp1;\n            tp1 = imgOut[i][j];\n            yp2 = yp1;\n            yp1 = y2[i][j];\n        }\n    }\n\n    for (i=0; i<_PB_W; i++)\n        for (j=0; j<_PB_H; j++)\n            imgOut[i][j] = c2*(y1[i][j] + y2[i][j]);\n\n"
    },
    "floyd-warshall.check.c": {
        "init_func": [
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i + j) * 2; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 100 + (i * j) % 10; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 4 == 0)\n                path[i][j] = (i * j) % 10 + 1; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 50 + (i + j) % 5; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 2 == 0)\n                path[i][j] = (i * j) % 20 + 5; \n            else if ((i * j) % 3 == 0)\n                path[i][j] = 75 + (i + j) % 7; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 30 + 10; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 100 + (i + j) % 11; \n            else\n                path[i][j] = 888; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i * j) % 17 + 5; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 200 + (i + j) % 13; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i * j) % 17 + 20; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 200 + (i + j) % 13; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i * j) % 15 + 10; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 60 + (i + j) % 9; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 4 == 0)\n                path[i][j] = (i * j) % 20 + 5; \n            else if ((i * j) % 3 == 0)\n                path[i][j] = 75 + (i + j) % 7; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 4 == 0)\n                path[i][j] = (i * j) % 23 + 10; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 150 + (i + j) % 11; \n            else\n                path[i][j] = 555; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 2 == 0)\n                path[i][j] = (i * j) % 31 + 20; \n            else if ((i * j) % 11 == 0)\n                path[i][j] = 200 + (i + j) % 13; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 15 + 10; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 50 + (i + j) % 11; \n            else\n                path[i][j] = 888; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 4 == 0)\n                path[i][j] = (i * j) % 20 + 5; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 80 + (i + j) % 11; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i * j) % 25 + 15; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 60 + (i + j) % 13; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 4 == 0)\n                path[i][j] = (i * j) % 20 + 5; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 70 + (i + j) % 11; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 29 + 30; \n            else if ((i * j) % 3 == 0)\n                path[i][j] = 300 + (i + j) % 17; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 4 == 0)\n                path[i][j] = (i * j) % 20 + 5; \n            else if ((i * j) % 6 == 0)\n                path[i][j] = 75 + (i + j) % 13; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 23 + 10; \n            else if ((i * j) % 3 == 0)\n                path[i][j] = 300 + (i + j) % 17; \n            else\n                path[i][j] = 888; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 30 + 10; \n            else if ((i * j) % 11 == 0)\n                path[i][j] = 100 + (i + j) % 10; \n            else\n                path[i][j] = 555; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i * j) % 17 + 10; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 150 + (i + j) % 11; \n            else\n                path[i][j] = 555; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 7 == 0)\n                path[i][j] = (i * j) % 31 + 15; \n            else if ((i * j) % 5 == 0)\n                path[i][j] = 500 + (i + j) % 19; \n            else\n                path[i][j] = 888; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 7 == 0)\n                path[i][j] = (i * j) % 37 + 40; \n            else if ((i * j) % 2 == 0)\n                path[i][j] = 400 + (i + j) % 23; \n            else\n                path[i][j] = 888; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 7 == 0)\n                path[i][j] = (i * j) % 23 + 30; \n            else if ((i * j) % 11 == 0)\n                path[i][j] = 300 + (i + j) % 17; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 23 + 30; \n            else if ((i * j) % 7 == 0)\n                path[i][j] = 250 + (i + j) % 17; \n            else\n                path[i][j] = 999; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 7 == 0)\n                path[i][j] = (i * j) % 30 + 15; \n            else if ((i * j) % 4 == 0)\n                path[i][j] = 450 + (i + j) % 19; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 3 == 0)\n                path[i][j] = (i * j) % 20 + 5; \n            else if ((i * j) % 13 == 0)\n                path[i][j] = 200 + (i + j) % 15; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(path, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n        {\n            if (i == j)\n                path[i][j] = 0; \n            else if ((i + j) % 5 == 0)\n                path[i][j] = (i * j) % 17 + 50; \n            else if ((i * j) % 3 == 0)\n                path[i][j] = 200 + (i + j) % 19; \n            else\n                path[i][j] = 777; \n        }\n    }\n}\n"
        ],
        "code": "\n  for (k = 0; k < _PB_N; k++)\n    {\n      for(i = 0; i < _PB_N; i++)\n\tfor (j = 0; j < _PB_N; j++)\n\t  path[i][j] = path[i][j] < path[i][k] + path[k][j] ?\n\t    path[i][j] : path[i][k] + path[k][j];\n    }\n"
    },
    "nussinov.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i * 2) % 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        table[i][j] = (DATA_TYPE)(i + j); \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)(i % 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        table[i][j] = (DATA_TYPE)(i * n + j); \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 1 : 2); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 2 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j); \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 3 == 0) ? 0 : (i % 3 == 1) ? 1 : 2); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j) / 2.0; \n        } else if ((i + j) % 3 == 1) {\n          table[i][j] = (DATA_TYPE)(i + j) * 1.5; \n        } else {\n          table[i][j] = (DATA_TYPE)(i * i + j * j); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 0 : 1); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 2 == 0) {\n          table[i][j] = (DATA_TYPE)(i + j); \n        } else {\n          table[i][j] = (DATA_TYPE)(i * j); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 0 : 1); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 2 == 0) {\n          table[i][j] = (DATA_TYPE)(i + j) * 0.5; \n        } else {\n          table[i][j] = (DATA_TYPE)(i * j) * 2.0; \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 3 == 0) ? 1 : (i % 3 == 1) ? 2 : 3); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i + j) * 0.75; \n        } else if ((i + j) % 3 == 1) {\n          table[i][j] = (DATA_TYPE)(i * j) * 1.5; \n        } else {\n          table[i][j] = (DATA_TYPE)(i * n + j) * 0.25; \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 'A' : 'B'); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        if ((i + j) % 4 == 0) {\n          table[i][j] = (DATA_TYPE)(i + j) * 0.5; \n        } else if ((i + j) % 4 == 1) {\n          table[i][j] = (DATA_TYPE)(i * j) * 1.25; \n        } else if ((i + j) % 4 == 2) {\n          table[i][j] = (DATA_TYPE)(i * n + j) * 0.75; \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j) * 1.5; \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 3 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j) / 3.0; \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j) * 1.5; \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 3 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i + j + 1); \n        } else {\n          table[i][j] = (DATA_TYPE)(i * j + 2); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 3 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        table[i][j] = (DATA_TYPE)((i + j) % 5); \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 0 : 1); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 2 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j); \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 1 : 2); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j + 1); \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j + 2); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 4 == 0) ? 1 : (i % 4 == 1) ? 2 : (i % 4 == 2) ? 3 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        switch ((i + j) % 4) {\n          case 0:\n            table[i][j] = (DATA_TYPE)(i + j) * 0.5; \n            break;\n          case 1:\n            table[i][j] = (DATA_TYPE)(i * j) * 1.0; \n            break;\n          case 2:\n            table[i][j] = (DATA_TYPE)(i * n + j) * 0.75; \n            break;\n          case 3:\n            table[i][j] = (DATA_TYPE)(i + j) * 1.25; \n            break;\n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 1 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        switch ((i + j) % 4) {\n          case 0:\n            table[i][j] = (DATA_TYPE)(i * j) * 0.5; \n            break;\n          case 1:\n            table[i][j] = (DATA_TYPE)(i + j) * 1.25; \n            break;\n          case 2:\n            table[i][j] = (DATA_TYPE)(i * n + j) * 0.75; \n            break;\n          case 3:\n            table[i][j] = (DATA_TYPE)(i + j) * 1.75; \n            break;\n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 3 == 0) ? 3 : (i % 3 == 1) ? 1 : 2); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j + 1); \n        } else if ((i + j) % 3 == 1) {\n          table[i][j] = (DATA_TYPE)(i + j + 2); \n        } else {\n          table[i][j] = (DATA_TYPE)(i * i + j * j); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 1 : 2); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        if ((i + j) % 4 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j) / 4.0; \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j) * 2.0; \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 2 : 3); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        switch ((i + j) % 3) {\n          case 0:\n            table[i][j] = (DATA_TYPE)(i * j) * 0.33; \n            break;\n          case 1:\n            table[i][j] = (DATA_TYPE)(i + j) * 1.33; \n            break;\n          case 2:\n            table[i][j] = (DATA_TYPE)(i * n + j) * 0.66; \n            break;\n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 4 == 0) ? 0 : (i % 4 == 1) ? 1 : (i % 4 == 2) ? 2 : 3);\n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        table[i][j] = (DATA_TYPE)((i * n + j) % 10);\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 'C' : 'G'); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        switch ((i + j) % 3) {\n          case 0:\n            table[i][j] = (DATA_TYPE)(i * j) * 0.33; \n            break;\n          case 1:\n            table[i][j] = (DATA_TYPE)(i + j) * 1.33; \n            break;\n          case 2:\n            table[i][j] = (DATA_TYPE)(i * n + j) * 0.66; \n            break;\n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 3 == 0) ? 1 : (i % 3 == 1) ? 2 : 3); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        if ((i + j) % 2 == 0) {\n          table[i][j] = (DATA_TYPE)(i * n + j + 1); \n        } else {\n          table[i][j] = (DATA_TYPE)(i * n - j + 2); \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 1 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        switch ((i + j) % 4) {\n          case 0:\n            table[i][j] = (DATA_TYPE)(i * j) * 0.5; \n            break;\n          case 1:\n            table[i][j] = (DATA_TYPE)(i + j) * 1.25; \n            break;\n          case 2:\n            table[i][j] = (DATA_TYPE)(i * n + j) * 0.75; \n            break;\n          case 3:\n            table[i][j] = (DATA_TYPE)(i - j) * 1.5; \n            break;\n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 2 : 3); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i == j) {\n        table[i][j] = 0; \n      } else if (i > j) {\n        table[i][j] = -1; \n      } else {\n        \n        table[i][j] = (DATA_TYPE)((i + j) % 5); \n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 4 == 0) ? 1 : (i % 4 == 1) ? 2 : (i % 4 == 2) ? 3 : 4); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        switch ((i + j) % 4) {\n          case 0:\n            table[i][j] = (DATA_TYPE)(i * j + 2);\n            break;\n          case 1:\n            table[i][j] = (DATA_TYPE)(i + j + 3);\n            break;\n          case 2:\n            table[i][j] = (DATA_TYPE)(i * i + j * j + 1);\n            break;\n          case 3:\n            table[i][j] = (DATA_TYPE)(i * j + i + j);\n            break;\n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 2 == 0) ? 'A' : 'U'); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        if ((i + j) % 2 == 0) {\n          table[i][j] = (DATA_TYPE)(i * j) * 0.5 + (DATA_TYPE)n * 0.1; \n        } else {\n          table[i][j] = (DATA_TYPE)(i + j) * 1.5 - (DATA_TYPE)n * 0.2; \n        }\n      }\n    }\n  }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 base POLYBENCH_1D(seq,N,n),\n                 DATA_TYPE POLYBENCH_2D(table,N,N,n,n))\n{\n  int i, j;\n\n  \n  for (i = 0; i < n; i++) {\n    seq[i] = (base)((i % 3 == 0) ? 1 : (i % 3 == 1) ? 2 : 3); \n  }\n\n  \n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      if (i >= j) {\n        table[i][j] = 0; \n      } else {\n        \n        if ((i + j) % 3 == 0) {\n          table[i][j] = (DATA_TYPE)(i + j); \n        } else if ((i + j) % 3 == 1) {\n          table[i][j] = (DATA_TYPE)(i * j); \n        } else {\n          table[i][j] = (DATA_TYPE)(n - i - j); \n        }\n      }\n    }\n  }\n}\n"
        ],
        "code": "\n for (i = _PB_N-1; i >= 0; i--) {\n  for (j=i+1; j<_PB_N; j++) {\n\n   if (j-1>=0)\n      table[i][j] = max_score(table[i][j], table[i][j-1]);\n   if (i+1<_PB_N)\n      table[i][j] = max_score(table[i][j], table[i+1][j]);\n\n   if (j-1>=0 && i+1<_PB_N) {\n     /* don't allow adjacent elements to bond */\n     if (i<j-1)\n        table[i][j] = max_score(table[i][j], table[i+1][j-1]+match(seq[i], seq[j]));\n     else\n        table[i][j] = max_score(table[i][j], table[i+1][j-1]);\n   }\n\n   for (k=i+1; k<j; k++) {\n      table[i][j] = max_score(table[i][j], table[i][k] + table[k+1][j]);\n   }\n  }\n }\n"
    },
    "adi.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(i * j) / (n * n);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(i * i + j * j) / (n * n);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(sin(i) * cos(j)) / (n * n);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(-(i + j)) * sin(i * j)) / (n * n);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(cos(i) * sin(j) + 1) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(sin(i * j) + cos(i + j)) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(i * 0.1) * exp(j * 0.1) - 1) / (exp(n * 0.1) - 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(sin(i) * cos(j)) + 1) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(sin(i * 0.1) * cos(j * 0.1) + 2) / (n + 2);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(pow(i, 2) + pow(j, 3)) / (n * n);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(i) * log(j + 1)) / (n * n);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(sin(i * 0.05) * cos(j * 0.05) + 2) / (n + 2);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(sin(i * 0.1) * cos(j * 0.1)) + 1) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(i * 0.05) * sin(j * 0.05) + 1) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(sin(i * 0.05) * cos(j * 0.05) + 2) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n        u[i][j] =  (DATA_TYPE)(exp(sin(i)) * cos(j)) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n        u[i][j] =  (DATA_TYPE)(sin(i * j) * cos(i + j)) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(sin(i) * cos(j)) + log(1 + i + j)) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(exp(sin(i * 0.05) * cos(j * 0.05)) + 1) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n                 DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n        u[i][j] =  (DATA_TYPE)(sin(i * 0.1) * cos(j * 0.1) + 1) / (n + 1);\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(u,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tu[i][j] =  (DATA_TYPE)(pow(i, 2) + pow(j, 3)) / (n + 1);\n      }\n}\n"
        ],
        "code": "\n for (t=1; t<=_PB_TSTEPS; t++) {\n\n    //Column Sweep\n    for (i=1; i<_PB_N-1; i++) {\n      v[0][i] = SCALAR_VAL(1.0);\n      p[i][0] = SCALAR_VAL(0.0);\n      q[i][0] = v[0][i];\n      for (j=1; j<_PB_N-1; j++) {\n        p[i][j] = -c / (a*p[i][j-1]+b);\n        q[i][j] = (-d*u[j][i-1]+(SCALAR_VAL(1.0)+SCALAR_VAL(2.0)*d)*u[j][i] - f*u[j][i+1]-a*q[i][j-1])/(a*p[i][j-1]+b);\n      }\n\n      v[_PB_N-1][i] = SCALAR_VAL(1.0);\n      for (j=_PB_N-2; j>=1; j--) {\n        v[j][i] = p[i][j] * v[j+1][i] + q[i][j];\n      }\n    }\n    //Row Sweep\n    for (i=1; i<_PB_N-1; i++) {\n      u[i][0] = SCALAR_VAL(1.0);\n      p[i][0] = SCALAR_VAL(0.0);\n      q[i][0] = u[i][0];\n      for (j=1; j<_PB_N-1; j++) {\n        p[i][j] = -f / (d*p[i][j-1]+e);\n        q[i][j] = (-a*v[i-1][j]+(SCALAR_VAL(1.0)+SCALAR_VAL(2.0)*a)*v[i][j] - c*v[i+1][j]-d*q[i][j-1])/(d*p[i][j-1]+e);\n      }\n      u[i][_PB_N-1] = SCALAR_VAL(1.0);\n      for (j=_PB_N-2; j>=1; j--) {\n        u[i][j] = p[i][j] * u[i][j+1] + q[i][j];\n      }\n    }\n  }\n"
    },
    "fdtd-2d.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 100) / 100.0; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) (i + j) / (nx + ny); \n\tey[i][j] = (DATA_TYPE) (i * j) / (nx * ny); \n\thz[i][j] = (DATA_TYPE) ((i + j) % 100) / 100.0; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 50) / 50.0 + 0.5; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) (i * j + 1) / (nx * ny + 1); \n\tey[i][j] = (DATA_TYPE) (i + j + 2) / (nx + ny + 2); \n\thz[i][j] = (DATA_TYPE) ((i * j + 3) % 75) / 75.0 + 0.25; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 20) / 20.0; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) ((i * j) % 50) / 50.0; \n\tey[i][j] = (DATA_TYPE) ((i + j) % 30) / 30.0; \n\thz[i][j] = (DATA_TYPE) ((i - j) % 40) / 40.0; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 10) / 10.0 + 0.1; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) ((i * j) % 25) / 25.0 + 0.2; \n\tey[i][j] = (DATA_TYPE) ((i + j) % 15) / 15.0 + 0.3; \n\thz[i][j] = (DATA_TYPE) ((i - j) % 35) / 35.0 + 0.4; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 10) / 10.0 + 0.1 * (i % 3); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) ((i * j + 5) % 60) / 60.0 + 0.1; \n\tey[i][j] = (DATA_TYPE) ((i + j + 10) % 40) / 40.0 + 0.2; \n\thz[i][j] = (DATA_TYPE) ((i * j + 15) % 50) / 50.0 + 0.3; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 20) / 20.0 + 0.75; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) (i * j + 4) / (nx * ny + 4); \n\tey[i][j] = (DATA_TYPE) (i + j + 5) / (nx + ny + 5); \n\thz[i][j] = (DATA_TYPE) ((i * j + 6) % 50) / 50.0 + 0.15; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 100) / 100.0 + 0.25; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) (i * j + 7) / (nx * ny + 7); \n\tey[i][j] = (DATA_TYPE) (i + j + 8) / (nx + ny + 8); \n\thz[i][j] = (DATA_TYPE) ((i * j + 9) % 100) / 100.0 + 0.35; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 20) / 20.0 + 0.15 * (i % 5); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 3) % 70) / 70.0 + 0.05; \n        ey[i][j] = (DATA_TYPE) ((i + j + 12) % 50) / 50.0 + 0.15; \n        hz[i][j] = (DATA_TYPE) ((i * j + 18) % 60) / 60.0 + 0.25; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 12) / 12.0 + 0.05 * (i % 5); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) ((i * j + 10) % 50) / 50.0 + 0.05; \n\tey[i][j] = (DATA_TYPE) ((i + j + 20) % 30) / 30.0 + 0.15; \n\thz[i][j] = (DATA_TYPE) ((i * j + 25) % 40) / 40.0 + 0.25; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 75) / 75.0 + 0.75; \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) (i * j + 5) / (nx * ny + 5); \n\tey[i][j] = (DATA_TYPE) (i + j + 10) / (nx + ny + 10); \n\thz[i][j] = (DATA_TYPE) ((i * j + 7) % 125) / 125.0 + 0.45; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.1 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 5) % 60) / 60.0 + 0.1; \n        ey[i][j] = (DATA_TYPE) ((i + j + 15) % 40) / 40.0 + 0.2; \n        hz[i][j] = (DATA_TYPE) ((i * j + 20) % 50) / 50.0 + 0.3; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 20) / 20.0 + 0.05 * (i % 11); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 10) % 70) / 70.0 + 0.05; \n        ey[i][j] = (DATA_TYPE) ((i + j + 20) % 50) / 50.0 + 0.15; \n        hz[i][j] = (DATA_TYPE) ((i * j + 30) % 60) / 60.0 + 0.25; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 20) / 20.0 + 0.05 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i + j) % 50) / 50.0 + 0.05; \n        ey[i][j] = (DATA_TYPE) ((i * j + 20) % 70) / 70.0 + 0.15; \n        hz[i][j] = (DATA_TYPE) ((i + j + 30) % 80) / 80.0 + 0.25; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.05 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 8) % 80) / 80.0 + 0.08; \n        ey[i][j] = (DATA_TYPE) ((i + j + 15) % 30) / 30.0 + 0.18; \n        hz[i][j] = (DATA_TYPE) ((i * j + 20) % 70) / 70.0 + 0.28; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.05 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 5) % 60) / 60.0 + 0.10; \n        ey[i][j] = (DATA_TYPE) ((i + j + 15) % 40) / 40.0 + 0.20; \n        hz[i][j] = (DATA_TYPE) ((i * j + 20) % 50) / 50.0 + 0.30; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 25) / 25.0 + 0.08 * (i % 11); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 10) % 70) / 70.0 + 0.12; \n        ey[i][j] = (DATA_TYPE) ((i + j + 25) % 60) / 60.0 + 0.22; \n        hz[i][j] = (DATA_TYPE) ((i * j + 35) % 90) / 90.0 + 0.32; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 17) / 17.0 + 0.06 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 5) % 60) / 60.0 + 0.08; \n        ey[i][j] = (DATA_TYPE) ((i + j + 15) % 40) / 40.0 + 0.18; \n        hz[i][j] = (DATA_TYPE) ((i * j + 30) % 80) / 80.0 + 0.28; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 12) / 12.0 + 0.15 * (i % 5); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 10) % 50) / 50.0 + 0.15; \n        ey[i][j] = (DATA_TYPE) ((i + j + 20) % 30) / 30.0 + 0.25; \n        hz[i][j] = (DATA_TYPE) ((i * j + 25) % 40) / 40.0 + 0.35; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.08 * (i % 5); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 10) % 30) / 30.0 + 0.08; \n        ey[i][j] = (DATA_TYPE) ((i + j + 5) % 60) / 60.0 + 0.12; \n        hz[i][j] = (DATA_TYPE) ((i * j + 25) % 40) / 40.0 + 0.2; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.5 * (i % 5); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) ((i * j + 8) % 70) / 70.0 + 0.05; \n\tey[i][j] = (DATA_TYPE) ((i + j + 12) % 50) / 50.0 + 0.15; \n\thz[i][j] = (DATA_TYPE) ((i * j + 20) % 60) / 60.0 + 0.25; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.2 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 5) % 60) / 60.0 + 0.2; \n        ey[i][j] = (DATA_TYPE) ((i + j + 15) % 40) / 40.0 + 0.3; \n        hz[i][j] = (DATA_TYPE) ((i * j + 30) % 50) / 50.0 + 0.4; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 10) / 10.0 + 0.1 * (i % 7); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 5) % 45) / 45.0 + 0.08; \n        ey[i][j] = (DATA_TYPE) ((i + j + 15) % 25) / 25.0 + 0.2; \n        hz[i][j] = (DATA_TYPE) ((i * j + 20) % 35) / 35.0 + 0.3; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n                 int nx,\n                 int ny,\n                 DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n                 DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 10) / 10.0 + 0.2 * (i % 3); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n        ex[i][j] = (DATA_TYPE) ((i * j + 5) % 60) / 60.0 + 0.12; \n        ey[i][j] = (DATA_TYPE) ((i + j + 12) % 25) / 25.0 + 0.22; \n        hz[i][j] = (DATA_TYPE) ((i * j + 18) % 50) / 50.0 + 0.32; \n      }\n}\n",
            "\nstatic\nvoid init_array (int tmax,\n\t\t int nx,\n\t\t int ny,\n\t\t DATA_TYPE POLYBENCH_2D(ex,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(ey,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_2D(hz,NX,NY,nx,ny),\n\t\t DATA_TYPE POLYBENCH_1D(_fict_,TMAX,tmax))\n{\n  int i, j;\n\n  for (i = 0; i < tmax; i++)\n    _fict_[i] = (DATA_TYPE) (i % 15) / 15.0 + 0.15 * (i % 5); \n  for (i = 0; i < nx; i++)\n    for (j = 0; j < ny; j++)\n      {\n\tex[i][j] = (DATA_TYPE) ((i * j + 10) % 70) / 70.0 + 0.15; \n\tey[i][j] = (DATA_TYPE) ((i + j + 20) % 50) / 50.0 + 0.25; \n\thz[i][j] = (DATA_TYPE) ((i * j + 25) % 60) / 60.0 + 0.35; \n      }\n}\n"
        ],
        "code": "\n\n  for(t = 0; t < _PB_TMAX; t++)\n    {\n      for (j = 0; j < _PB_NY; j++)\n\tey[0][j] = _fict_[t];\n      for (i = 1; i < _PB_NX; i++)\n\tfor (j = 0; j < _PB_NY; j++)\n\t  ey[i][j] = ey[i][j] - SCALAR_VAL(0.5)*(hz[i][j]-hz[i-1][j]);\n      for (i = 0; i < _PB_NX; i++)\n\tfor (j = 1; j < _PB_NY; j++)\n\t  ex[i][j] = ex[i][j] - SCALAR_VAL(0.5)*(hz[i][j]-hz[i][j-1]);\n      for (i = 0; i < _PB_NX - 1; i++)\n\tfor (j = 0; j < _PB_NY - 1; j++)\n\t  hz[i][j] = hz[i][j] - SCALAR_VAL(0.7)*  (ex[i][j+1] - ex[i][j] +\n\t\t\t\t       ey[i+1][j] - ey[i][j]);\n    }\n\n"
    },
    "heat-3d.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * i + j * j + k * k) % n) * 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % n) * 0.05 + 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) (sin(i) + cos(j) + tan(k)) * 0.5;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 10) * 0.1 + 0.05;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * i + j * j + k * k) % 100) * 0.01 + 0.05;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % 150) * 0.005 + 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * i + j * j + k * k) % 100) * 0.01;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) (sqrt(i * i + j * j + k * k) / (n * n * n)) * 10.0 + 0.5;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 20) * 0.05 + 0.01 * (i - j + k);\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 20) * 0.05 + 0.05;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * i + j * j + k * k) % 200) * 0.0025 + 0.15;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % 20) * 0.05 + 0.1;\n}\n",
            "\nstatic\nvoid init_array(int n,\n                DATA_TYPE POLYBENCH_3D(A, N, N, N, n, n, n),\n                DATA_TYPE POLYBENCH_3D(B, N, N, N, n, n, n))\n{\n    int i, j, k;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            for (k = 0; k < n; k++)\n                A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % 30) * 0.0333 + 0.0333;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 100) * 0.01 + 0.05;\n}\n",
            "\nstatic\nvoid init_array(int n,\n                DATA_TYPE POLYBENCH_3D(A, N, N, N, n, n, n),\n                DATA_TYPE POLYBENCH_3D(B, N, N, N, n, n, n))\n{\n    int i, j, k;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            for (k = 0; k < n; k++)\n                A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 20) * 0.02 - 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) (i * i + j * j + k * k) / (n * n) * 0.1;\n}\n",
            "\nstatic\nvoid init_array(int n,\n                DATA_TYPE POLYBENCH_3D(A, N, N, N, n, n, n),\n                DATA_TYPE POLYBENCH_3D(B, N, N, N, n, n, n))\n{\n    int i, j, k;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            for (k = 0; k < n; k++)\n                A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 2 == 0 ? 1.0 : 0.0);\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) (sin(i) * cos(j) * tan(k)) / (n * n) * 0.2 + 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) (sqrt(i) + pow(j, 2) + log(k + 1)) * 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) (i * i + j * j + k * k) * 0.001 + 0.1;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i + j + k) % 50) * 0.02 + 0.01;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * i + j * j + k * k) % 250) * 0.004 + 0.05 * sin(i + j + k);\n}\n",
            "\nstatic\nvoid init_array(int n,\n                DATA_TYPE POLYBENCH_3D(A, N, N, N, n, n, n),\n                DATA_TYPE POLYBENCH_3D(B, N, N, N, n, n, n))\n{\n    int i, j, k;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            for (k = 0; k < n; k++)\n                A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % 50) * 0.02 + 0.005 * (i + j - k);\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % 100) * 0.01 + 0.05;\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_3D(A,N,N,N,n,n,n),\n\t\t DATA_TYPE POLYBENCH_3D(B,N,N,N,n,n,n))\n{\n  int i, j, k;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      for (k = 0; k < n; k++)\n        A[i][j][k] = B[i][j][k] = (DATA_TYPE) ((i * j * k) % 15) * 0.0667 + 0.0333;\n}\n"
        ],
        "code": "\n    for (t = 1; t <= TSTEPS; t++) {\n        for (i = 1; i < _PB_N-1; i++) {\n            for (j = 1; j < _PB_N-1; j++) {\n                for (k = 1; k < _PB_N-1; k++) {\n                    B[i][j][k] =   SCALAR_VAL(0.125) * (A[i+1][j][k] - SCALAR_VAL(2.0) * A[i][j][k] + A[i-1][j][k])\n                                 + SCALAR_VAL(0.125) * (A[i][j+1][k] - SCALAR_VAL(2.0) * A[i][j][k] + A[i][j-1][k])\n                                 + SCALAR_VAL(0.125) * (A[i][j][k+1] - SCALAR_VAL(2.0) * A[i][j][k] + A[i][j][k-1])\n                                 + A[i][j][k];\n                }\n            }\n        }\n        for (i = 1; i < _PB_N-1; i++) {\n           for (j = 1; j < _PB_N-1; j++) {\n               for (k = 1; k < _PB_N-1; k++) {\n                   A[i][j][k] =   SCALAR_VAL(0.125) * (B[i+1][j][k] - SCALAR_VAL(2.0) * B[i][j][k] + B[i-1][j][k])\n                                + SCALAR_VAL(0.125) * (B[i][j+1][k] - SCALAR_VAL(2.0) * B[i][j][k] + B[i][j-1][k])\n                                + SCALAR_VAL(0.125) * (B[i][j][k+1] - SCALAR_VAL(2.0) * B[i][j][k] + B[i][j][k-1])\n                                + B[i][j][k];\n               }\n           }\n       }\n    }\n"
    },
    "jacobi-1d.check.c": {
        "init_func": [
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)i / (n * 10);\n        B[i] = (DATA_TYPE)(n - i) / (n * 10);\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 100) / 100.0; \n        B[i] = (DATA_TYPE)((n - i) % 100) / 100.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * i % 100) / 100.0; \n        B[i] = (DATA_TYPE)((n - i) * (n - i) % 100) / 100.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 20) / 20.0; \n        B[i] = (DATA_TYPE)((n - i) % 20) / 20.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * 2 % 100) / 100.0; \n        B[i] = (DATA_TYPE)((n - i) * 2 % 100) / 100.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 50) / 50.0 + 0.1; \n        B[i] = (DATA_TYPE)((n - i) % 50) / 50.0 + 0.1; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(sin(i) * sin(i));\n        B[i] = (DATA_TYPE)(cos(i) * cos(i));\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * i % 30) / 30.0; \n        B[i] = (DATA_TYPE)((n - i) * (n - i) % 30) / 30.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(sin(i) * sin(i)); \n        B[i] = (DATA_TYPE)(cos(i) * cos(i)); \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 10); \n        B[i] = (DATA_TYPE)(i % 5);  \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * 0.1); \n        B[i] = (DATA_TYPE)(i * 0.2);  \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 2 == 0 ? i : -i) / (DATA_TYPE)n; \n        B[i] = (DATA_TYPE)(i % 2 == 0 ? n - i : i - n) / (DATA_TYPE)n; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * i) / (n * n); \n        B[i] = (DATA_TYPE)(n - i) * (n - i) / (n * n); \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(sin(i) + cos(i / 2.0)) / 2.0;\n        B[i] = (DATA_TYPE)(cos(i) - sin(i / 2.0)) / 2.0;\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 10);  \n        B[i] = (DATA_TYPE)(i % 5);   \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * i) / (n * n + 1); \n        B[i] = (DATA_TYPE)(n - i) * (n - i) / (n * n + 1); \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * 0.1);  \n        B[i] = (DATA_TYPE)(1.0 / (i + 1));  \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 10) / 10.0; \n        B[i] = (DATA_TYPE)((n - i) % 10) / 10.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(sin(i * 0.1) * cos(i * 0.1));\n        B[i] = (DATA_TYPE)(cos(i * 0.1) * sin(i * 0.1));\n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * i % 1000) / 1000.0; \n        B[i] = (DATA_TYPE)((n - i) * (n - i) % 1000) / 1000.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 10) * 0.1; \n        B[i] = (DATA_TYPE)((n - i) % 10) * 0.1; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i % 100) / 100.0 * 2.0 - 1.0; \n        B[i] = (DATA_TYPE)((n - i) % 100) / 100.0 * 2.0 - 1.0; \n    }\n}\n",
            "\nstatic void init_array(int n,\n                       DATA_TYPE POLYBENCH_1D(A, N, n),\n                       DATA_TYPE POLYBENCH_1D(B, N, n))\n{\n    int i;\n\n    for (i = 0; i < n; i++)\n    {\n        A[i] = (DATA_TYPE)(i * i) / (DATA_TYPE)(n * n); \n        B[i] = (DATA_TYPE)(n - i) * (DATA_TYPE)i / (DATA_TYPE)(n * n); \n    }\n}\n"
        ],
        "code": "\n  for (t = 0; t < _PB_TSTEPS; t++)\n    {\n      for (i = 1; i < _PB_N - 1; i++)\n\tB[i] = 0.33333 * (A[i-1] + A[i] + A[i + 1]);\n      for (i = 1; i < _PB_N - 1; i++)\n\tA[i] = 0.33333 * (B[i-1] + B[i] + B[i + 1]);\n    }\n"
    },
    "jacobi-2d.check.c": {
        "init_func": [
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 1) + 10) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 2) + 20) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 5) + 5) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 10) + 10) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 2) + 15) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 7) + 25) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 3) + 10) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 6) + 20) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 5) + 12) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 10) + 30) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 1) + 5) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 2) + 15) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) (i + j) * (i - j) + 10) / n;\n\tB[i][j] = ((DATA_TYPE) (i - j) * (i + j) + 20) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 2) + 10) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 3) + 20) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 3) + 25) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 4) + 30) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 1) + 1) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 2) + 2) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 5) + 12) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 8) + 22) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 3) + 10) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 4) + 20) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 5) + 10) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 6) + 20) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) (i + j) * (i + j + 1) / 2 + i + 1) / n;\n\tB[i][j] = ((DATA_TYPE) (i + j) * (i + j + 2) / 2 + j + 1) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 2) + 5) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 5) + 15) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 5) + 15) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 6) + 25) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 2) + 15) / n;\n\tB[i][j] = ((DATA_TYPE) i * (j + 3) + 25) / n;\n      }\n}\n",
            "\nstatic\nvoid init_array (int n,\n\t\t DATA_TYPE POLYBENCH_2D(A,N,N,n,n),\n\t\t DATA_TYPE POLYBENCH_2D(B,N,N,n,n))\n{\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++)\n      {\n\tA[i][j] = ((DATA_TYPE) i * (j + 2) + 10) / (n + 5);\n\tB[i][j] = ((DATA_TYPE) i * (j + 3) + 15) / (n + 10);\n      }\n}\n"
        ],
        "code": "\n  for (t = 0; t < _PB_TSTEPS; t++)\n    {\n      for (i = 1; i < _PB_N - 1; i++)\n\tfor (j = 1; j < _PB_N - 1; j++)\n\t  B[i][j] = SCALAR_VAL(0.2) * (A[i][j] + A[i][j-1] + A[i][1+j] + A[1+i][j] + A[i-1][j]);\n      for (i = 1; i < _PB_N - 1; i++)\n\tfor (j = 1; j < _PB_N - 1; j++)\n\t  A[i][j] = SCALAR_VAL(0.2) * (B[i][j] + B[i][j-1] + B[i][1+j] + B[1+i][j] + B[i-1][j]);\n    }\n"
    },
    "seidel-2d.check.c": {
        "init_func": [
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 3) + 5) / (n + 1);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 1) + 10) / (n * 2);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 2) + 7) / (n + 3);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 3) + 5) / (n + 5);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 1) * (i + j + 1)) / (n * n + 1);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i + 1) * (j + 1) * (i + j + 2)) / (n * n + 2);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i + 1) * (j + 1)) / (n * n);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i * i + j * j + 1) % (n + 1)) / (n + 1);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 2) * (i + j + 2)) / (n * n + 2);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i + j) * (i - j + 1)) / (2 * n);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 2) + 10) / (n + 2);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i + j) % 5) * 0.1;\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i * j + 2) * (i + j + 3)) / (n * n + 4);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i * i + j * j) % (n + 1)) / (n + 1);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 3) + 15) / (n + 3);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 5) + 10) / (n + 5);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) i * (j + 2) + 10) / (n + 10);\n}\n",
            "\nstatic void init_array(int n, DATA_TYPE POLYBENCH_2D(A, N, N, n, n))\n{\n    int i, j;\n\n    for (i = 0; i < n; i++)\n        for (j = 0; j < n; j++)\n            A[i][j] = ((DATA_TYPE) (i * i + j * j + 10)) / (n * n);\n}\n"
        ],
        "code": "\n  for (t = 0; t <= _PB_TSTEPS - 1; t++)\n    for (i = 1; i<= _PB_N - 2; i++)\n      for (j = 1; j <= _PB_N - 2; j++)\n\tA[i][j] = (A[i-1][j-1] + A[i-1][j] + A[i-1][j+1]\n\t\t   + A[i][j-1] + A[i][j] + A[i][j+1]\n\t\t   + A[i+1][j-1] + A[i+1][j] + A[i+1][j+1])/SCALAR_VAL(9.0);\n"
    }
}