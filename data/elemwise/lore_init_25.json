{
    "1_ALPBench_addMatrixEquals.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_get_mean_image.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_makeZeroMatrix.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_multiplyMatrix.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_subtractClassMean.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_subtractMatrix.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_transposeMultiplyMatrixL.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ALPBench_transposeMultiplyMatrixR.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ASC_Sequoia_Crystal_Cholesky.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ASC_Sequoia_MS_Xtal_PowerTay.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_ASC_Sequoia_MS_Xtal_SlipRateCalc.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Cortexsuite_Eigen_reduction_1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Cortexsuite_corcol_1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Cortexsuite_corcol_2.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Cortexsuite_dict2pid_build.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Cortexsuite_lda_inference_1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Cortexsuite_lda_inference_2.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Freebench_pcompress2.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Freebench_pifft1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Freebench_pifft2.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Freebench_pifft3.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "1_Freebench_pifft4.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt11.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt14.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt15.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt16.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt17.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt18.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt2.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt3.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt4.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt5.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt6.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt7.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt8.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_bt9.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_cg.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_ft2.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_lu.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_lu13.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_lu3.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_lu5.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_lu7.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_lu8.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_mg1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_mg3.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_mg4.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_NPB_mg5.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_SCImark_array.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 7;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 5);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_SCImark_lu1.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 3;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 1;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 10);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 7);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 8);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 6;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 9;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 2;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 7;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    },
    "2_SCImark_sor.check.c": {
        "code": [
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 3;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 1);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 5);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 4);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 8);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 9);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 7);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 10);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 9;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 1);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 2);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 2);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 7);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 3);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 1);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 2;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 1;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 3;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 9;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 10);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 4;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 5;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 2);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 5;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) cos(j - start) * (end - j) * 5;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 8;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 5);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 4;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 4;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 4);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 7;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 6;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 4);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 5);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 9;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 3;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) exp(rand() % 3);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 2);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 5;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) log10(j - start + 10);\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) sqrt(end - j + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 7);\n                break;\n            case 4: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 6);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) sin(j - start) * (j - start) * 8;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) log2(j - start + 9);\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) log(j - start + 8);\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n",
            "\nvoid init_array_1d(double *array, int d1)\n{\n    int seed = 1;\n    srand(seed);  \n    int num_ranges = rand() % 5 + 1;  \n    int base_range_size = d1 / num_ranges;\n    int remainder = d1 % num_ranges;\n    int start = 0;\n    int end, method;\n    for (int i = 0; i < num_ranges; i++) {\n        end = start + base_range_size + (i < remainder ? 1 : 0); \n        method = rand() % 4;  \n        switch (method) {\n            \n            case 0: \n                for (int j = start; j < end; j++) array[j] = (double) pow(j - start, 6);\n                break;\n            case 1: \n                for (int j = start; j < end; j++) array[j] = (double) atan(j - start) * 1;\n                break;\n            case 2: \n                for (int j = start; j < end; j++) array[j] = (double) rand() / RAND_MAX * 10;\n                break;\n            case 3: \n                for (int j = start; j < end; j++) array[j] = (double) sin(rand()) * 10;\n                break;\n        }\n        start = end;\n    }\n    normalize_array_1d(array, d1);\n}\n"
        ]
    }
}